// <auto-generated />

#nullable enable

using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;

namespace AVFoundation;

/// <summary>
/// Extension methods for the <see cref="AVCaptureDeviceTypeExtensions" /> enumeration.
/// </summary>
[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
public static partial class AVCaptureDeviceTypeExtensions
{

	static IntPtr[] values = new IntPtr [11];

	[Field ("AVCaptureDeviceTypeBuiltInMicrophone", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInMicrophone
	{
		get
		{
			fixed (IntPtr *storage = &values [0])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInMicrophone", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInWideAngleCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInWideAngleCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [1])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInWideAngleCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInTelephotoCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInTelephotoCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [2])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInTelephotoCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInDuoCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInDuoCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [3])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInDuoCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInDualCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInDualCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [4])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInDualCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInTrueDepthCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInTrueDepthCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [5])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInTrueDepthCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInUltraWideCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInUltraWideCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [6])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInUltraWideCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInTripleCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInTripleCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [7])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInTripleCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInDualWideCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInDualWideCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [8])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInDualWideCamera", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeExternalUnknown", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeExternalUnknown
	{
		get
		{
			fixed (IntPtr *storage = &values [9])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeExternalUnknown", storage);
		}
	}

	[Field ("AVCaptureDeviceTypeBuiltInLiDARDepthCamera", "AVFoundation")]
	internal unsafe static IntPtr AVCaptureDeviceTypeBuiltInLiDARDepthCamera
	{
		get
		{
			fixed (IntPtr *storage = &values [10])
				return Dlfcn.CachePointer (global::ObjCRuntime.Libraries.AVFoundation.Handle, "AVCaptureDeviceTypeBuiltInLiDARDepthCamera", storage);
		}
	}

	/// <summary>
	/// Retrieves the <see cref="global::Foundation.NSString" /> constant that describes <paramref name="self" />.
	/// </summary>
	/// <param name="self">The instance on which this method operates.</param>
	public static NSString? GetConstant (this AVCaptureDeviceType self)
	{
		IntPtr ptr = IntPtr.Zero;
		switch ((int) self)
		{
			case 0: // AVCaptureDeviceTypeBuiltInMicrophone
				ptr = AVCaptureDeviceTypeBuiltInMicrophone;
				break;
			case 1: // AVCaptureDeviceTypeBuiltInWideAngleCamera
				ptr = AVCaptureDeviceTypeBuiltInWideAngleCamera;
				break;
			case 2: // AVCaptureDeviceTypeBuiltInTelephotoCamera
				ptr = AVCaptureDeviceTypeBuiltInTelephotoCamera;
				break;
			case 3: // AVCaptureDeviceTypeBuiltInDuoCamera
				ptr = AVCaptureDeviceTypeBuiltInDuoCamera;
				break;
			case 4: // AVCaptureDeviceTypeBuiltInDualCamera
				ptr = AVCaptureDeviceTypeBuiltInDualCamera;
				break;
			case 5: // AVCaptureDeviceTypeBuiltInTrueDepthCamera
				ptr = AVCaptureDeviceTypeBuiltInTrueDepthCamera;
				break;
			case 6: // AVCaptureDeviceTypeBuiltInUltraWideCamera
				ptr = AVCaptureDeviceTypeBuiltInUltraWideCamera;
				break;
			case 7: // AVCaptureDeviceTypeBuiltInTripleCamera
				ptr = AVCaptureDeviceTypeBuiltInTripleCamera;
				break;
			case 8: // AVCaptureDeviceTypeBuiltInDualWideCamera
				ptr = AVCaptureDeviceTypeBuiltInDualWideCamera;
				break;
			case 9: // AVCaptureDeviceTypeExternalUnknown
				ptr = AVCaptureDeviceTypeExternalUnknown;
				break;
			case 10: // AVCaptureDeviceTypeBuiltInLiDARDepthCamera
				ptr = AVCaptureDeviceTypeBuiltInLiDARDepthCamera;
				break;
		}
		return (NSString?) Runtime.GetNSObject (ptr);
	}

	/// <summary>
	/// Retrieves the <see cref="AVCaptureDeviceTypeExtensions" /> value named by <paramref name="constant" />.
	/// </summary>
	/// <param name="constant">The name of the constant to retrieve.</param>
	public static AVCaptureDeviceType GetValue (NSString constant)
	{
		if (constant is null)
			throw new ArgumentNullException (nameof (constant));
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInMicrophone))
			return AVCaptureDeviceType.BuiltInMicrophone;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInWideAngleCamera))
			return AVCaptureDeviceType.BuiltInWideAngleCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInTelephotoCamera))
			return AVCaptureDeviceType.BuiltInTelephotoCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInDuoCamera))
			return AVCaptureDeviceType.BuiltInDuoCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInDualCamera))
			return AVCaptureDeviceType.BuiltInDualCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInTrueDepthCamera))
			return AVCaptureDeviceType.BuiltInTrueDepthCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInUltraWideCamera))
			return AVCaptureDeviceType.BuiltInUltraWideCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInTripleCamera))
			return AVCaptureDeviceType.BuiltInTripleCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInDualWideCamera))
			return AVCaptureDeviceType.BuiltInDualWideCamera;
		if (constant.IsEqualTo (AVCaptureDeviceTypeExternalUnknown))
			return AVCaptureDeviceType.ExternalUnknown;
		if (constant.IsEqualTo (AVCaptureDeviceTypeBuiltInLiDARDepthCamera))
			return AVCaptureDeviceType.BuiltInLiDarDepthCamera;
		throw new NotSupportedException ($"The constant {constant} has no associated enum value on this platform.");
	}

	/// <summary>
	/// Retrieves the <see cref="AVCaptureDeviceTypeExtensions" /> value represented by the backing field value in <paramref name="handle" />.
	/// </summary>
	/// <param name="handle">The native handle with the name of the constant to retrieve.</param>
	public static AVCaptureDeviceType GetValue (global::ObjCRuntime.NativeHandle handle)
	{
		using var str = Runtime.GetNSObject<NSString> (handle)!;
		return GetValue (str);
	}

	/// <summary>
	/// Retrieves the <see cref="AVCaptureDeviceTypeExtensions" /> value represented by the backing field value in <paramref name="handle" />.
	/// </summary>
	/// <param name="handle">The native handle with the name of the constant to retrieve.</param>
	public static AVCaptureDeviceType? GetNullableValue (global::ObjCRuntime.NativeHandle handle)
	{
		using var str = Runtime.GetNSObject<NSString> (handle);
		if (str is null)
			return null;
		return GetValue (str);
	}

	/// <summary>
	/// Converts an array of <see cref="AVCaptureDeviceTypeExtensions" /> enum values into an array of their corresponding constants.
	/// </summary>
	/// <param name="values">The array of enum values to convert.</param>
	internal static NSString?[]? ToConstantArray (this AVCaptureDeviceType[]? values)
	{
		if (values is null)
			return null;
		var rv = new global::System.Collections.Generic.List<NSString?> ();
		for (var i = 0; i < values.Length; i++) {
			var value = values [i];
			rv.Add (value.GetConstant ());
		}
		return rv.ToArray ();
	}

	/// <summary>
	/// Converts an array of <see cref="NSString" /> values into an array of their corresponding enum values.
	/// </summary>
	/// <param name="values">The array if <see cref="NSString" /> values to convert.</param>
	internal static AVCaptureDeviceType[]? ToEnumArray (this NSString[]? values)
	{
		if (values is null)
			return null;
		var rv = new global::System.Collections.Generic.List<AVCaptureDeviceType> ();
		for (var i = 0; i < values.Length; i++) {
			var value = values [i];
			rv.Add (GetValue (value));
		}
		return rv.ToArray ();
	}
}
