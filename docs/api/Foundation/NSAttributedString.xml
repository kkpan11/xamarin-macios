<Documentation>
  <Docs DocId="T:Foundation.NSAttributedString">
    <summary>Strings that can be annotated with a set of attributes.</summary>
    <remarks>
      <para>
	The NSAttributedString type represents a string that has a
	series of attributes applied uniformly.  
      </para>
      <para>
        <img href="~/Foundation/_images/NSAttributedString.png" alt="Diagram showing an attributed string." />
      </para>
      <para> The companion <see cref="Foundation.NSMutableAttributedString" /> type
	can be used to create attributed strings that have overlapping
	attributes and whose contents can be modified after creation.
      </para>
      <para> 
	These types typically are used to attach information to
	elements of the string that dictate the font and colors to use
	as well as rendering attributes like kerning or how to render
	ligatures on a specific run of code.
      </para>
      <para> These classes do not dictate the meaning or behavior of
	the attributes on a string, they merely keep track of the
	attributes.  The actual meaning of these attributes is
	interpreted by the consumer of these objects.   
      </para>
      <para> 
	NSAttributedStrings are created with a string and a set
	of attributes.  The default constructor takes a string and an
	NSDictionary object where the keys represent the attributes
	and the values on each element represent the value of that
	attribute. 
      </para>
      <para>To simplify many common scenarios, MonoTouch
	provides constructors with strong-types to easily create
	attributed strings for use with CoreText or UIKit.   These
	constructors provide type-safety and eliminate programming
	errors caused by accidentally creating attributes that are not
	recognized by a backend. 
      </para>
      <para>
	To create NSAttributedStrings that you can use with CoreText's
	rendering, you create an instance of the <see cref="CoreText.CTStringAttributes" /> class, set its
	properties to the attributes that you desire, and then invoke
	the NSAttributedString constructor with it.   
      </para>
      <para>
	To create NSAttributedStrings that you can use with UIKit's
	rendering, you create an instance of the <see cref="UIKit.UIStringAttributes" /> class, set its
	properties to the attributes that you desire, and then invoke
	the NSAttributedString constructor with it.   
      </para>
      <para>
	The examples below show how to use the C# object initializer
	syntax to initialize the CTStringAttributes and the
	UIStringAttributes to setup your attributes.   You can later
	use these attributes multiple times with different attributed
	strings: 
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// 
// Using NSAttributedString with CoreText
//
var attributedString = new NSAttributedString ("Hello, world",
       new CTStringAttributes () {
              ForegroundColorFromContext =  true,
              Font = new CTFont ("Arial", 24)
       });

// Pass the NSAttributedString to a CTLine and draw the CTLine.
using (var textLine = new CTLine (attributedString)) {
       textLine.Draw (gctx);
}

// 
// Using NSAttributedString with UIKit
//
var myText = new NSAttributedString ("Hello, world",
       new UIStringAttributes () {
              ForegroundColor =  UIColor.Red,
	      KerningAdjustment = 3
       });
label.AttributedText = myText;
	]]></code>
      </example>
      <para>
	While both <see cref="CoreText.CTStringAttributes" /> and <see cref="UIKit.UIStringAttributes" /> are useful to
	create attributes that can later be used with attributed
	strings, it is also possible to use the <see cref="Foundation.NSAttributedString(string,UIKit.UIFont,UIKit.UIColor,UIKit.UIColor,UIKit.UIColor,UIKit.NSParagraphStyle,Foundation.NSLigatureType,float,Foundation.NSUnderlineStyle,UIKit.NSShadow,float,Foundation.NSUnderlineStyle" /> constructor
	with C# named parameters for quickly creating attributed
	strings inline.
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit without creating the attributes separately
//
var text = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
      </example>
      <para>
	It is also possible to create NSAttributedStrings with the
	NSDictionary API, although that does not offer any type safety
	nor prevents common errors.   To use it, you typically use
	the various NSString properties that end in "AttributedName"
	that are part of this class.
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit using NSDictionaries
//
var dict = new NSMutableDictionary () {
    { NSAttributedString.FontAttributeName, UIFont.FromName ("HoeflerText-Regular", 24.0f), },
    { NSAttributedString.ForegroundColorAttributeName, UIColor.Black }
};

var text = new NSAttributedString (
	"Hello, World", dict);
	]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html">Apple documentation for <c>NSAttributedString</c></related>
  </Docs>
  <Docs DocId="M:Foundation.NSAttributedString.#ctor(System.String,UIKit.UIFont,UIKit.UIColor,UIKit.UIColor,UIKit.UIColor,UIKit.NSParagraphStyle,Foundation.NSLigatureType,System.Single,Foundation.NSUnderlineStyle,UIKit.NSShadow,System.Single,Foundation.NSUnderlineStyle)">
    <param name="str">String to create.</param>
    <param name="font">Desired font (or null, if none is desired).</param>
    <param name="foregroundColor">Desired foreground color (or null if none is desired).</param>
    <param name="backgroundColor">Desired background color (or null if none is desired)..</param>
    <param name="strokeColor">Desired stroke color (or null if none is desired).</param>
    <param name="paragraphStyle">To be added.</param>
    <param name="ligatures">To be added.</param>
    <param name="kerning">To be added.</param>
    <param name="underlineStyle">To be added.</param>
    <param name="shadow">Desired shadow.</param>
    <param name="strokeWidth">Desired stroked width..</param>
    <param name="strikethroughStyle">To be added.</param>
    <summary>Creates a UIKit attributed string with the specified attributes in the parameters.</summary>
    <remarks>
      <para>
	    This is the recommended constructor for NSAttributedString
	    objects that are intended to be unique.   
	  </para>
      <para>
	    The advantage of this constructor is that other than the
	    string, every parameter is optional.   It provides a
	    convenient way of creating the objects
	  </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit without creating the attributes separately
//
var text = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
      </example>
      <para>
	    For cases where the same attributes will be reused across
	    multiple attributed strings, it is best to create the
	    attributes using the UIStringAttributes class as that will
	    share the same dictionary across multiple uses while this
	    constructor creates a dictionary on demand for the
	    specified attributes in the constructor.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Foundation.NSAttributedString.LowLevelGetAttributes(System.IntPtr,Foundation.NSRange@)">
        <param name="location">The location to probe.</param>
        <param name="effectiveRange">The range to probe.</param>
        <summary>Low-level version that provides an NSDictionary for the attributes in the specified range.</summary>
        <returns>IntPtr handle to a native NSDictionary class.</returns>
        <remarks>
          <para>
	    In general, you should use the <see cref="Foundation.NSAttributedString.LowLevelGetAttributes(System.IntPtr,out Foundation.NSRange)" />
	    methods, which will return a high-level NSDictionary.
	  </para>
          <para>
	    This is the low-level interface to NSAttributedString and
	    in general is only useful for subclasses.  You are
	    expected to return an IntPtr that represents a handle to
	    an NSDictionary.  This API is kept as a low-level API,
	    since it is consumed by NSTextStorage which might call
	    this method thousands of times per character insertion, so
	    it is very important that this is kept as fast as
	    possible, possibly even caching or reusing existing
	    dictionary instances.

	  </para>
        </remarks>
      </Docs>
</Documentation>