<Documentation>
  <Docs DocId="T:AVFoundation.AVAudioSession">
    <summary>Coordinates an audio playback or capture session.</summary>
    <remarks>
      <para> Application developers should use the singleton object
	retrieved by <see cref="AVFoundation.AVAudioSession.SharedInstance" />.
      </para>
      <para> 
	Because the audio hardware of an iOS device is shared
	between all apps, audio settings can only be "preferred" (see
	<c>SetPreferred*</c> methods) and the application developer
	must account for use-cases where these preferences are
	overridden. 
      </para>
      <para> 
	The interaction of an app with other apps and system
	services is determined by your audio category.   You can use the <see cref="AVFoundation.AVAudioSession.SetCategory(System.String,System.String,AVFoundation.AVAudioSessionRouteSharingPolicy,AVFoundation.AVAudioSessionCategoryOptions,out Foundation.NSError)" /> method to set this
      </para>
      <para>
	You should also control the Mode (using <see cref="AVFoundation.AVAudioSession.SetMode(Foundation.NSString,out Foundation.NSError)" /> to
	describe how your application will use audio.

      </para>
      <para>
	As is common in AV Foundation, many methods in <see cref="AVFoundation.AVAudioSession" /> are
	asynchronous and properties may take some time to reflect
	their final status. Application developers should be familiar
	with asynchronous programming techniques.
      </para>
      <para>
	The <see cref="AVFoundation.AVAudioSession" />,
	like the <see cref="AVFoundation.AVCaptureSession" /> and <see cref="AVFoundation.AVAssetExportSession" /> is a
	coordinating object between some number of <see cref="AVFoundation.AVAudioSession.InputDataSources" />
	and <see cref="AVFoundation.AVAudioSession.OutputDataSources" />.
	</para>
      <para>
	  You can register to a few notifications that are posted by the audio system, by using the convenience methods in <see cref="AVFoundation.AVAudioSession.Notifications" />. 

	</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
void Setup ()
{
	AVAudioSession.SharedInstance ().Init ();
	NSError error;
	if (!AVAudioSession.SharedInstance ().SetCategory (AVAudioSessionCategory.Playback, out error)) {
		ReportError (error);
		return;
	}
	AVAudioSession.Notifications.ObserveInterruption (ToneInterruptionListener);
	
	if (!AVAudioSession.SharedInstance ().SetActive (true, out error)) {
		ReportError (error);
		return;
	}
	
	void ToneInterruptionListener (object sender, AVAudioSessionInterruptionEventArgs interruptArgs)
	{
		//
	}
}
]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioSession_ClassReference/index.html">Apple documentation for <c>AVAudioSession</c></related>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAudioSession.InterruptionNotification">
    <summary>Notification constant for Interruption</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="AVFoundation.AVAudioSession.Notifications" />.<see cref="AVFoundation.AVAudioSession.Notifications.ObserveInterruption" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVAudioSession.Notifications.ObserveInterruption ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("InterruptionType", args.InterruptionType);
    Console.WriteLine ("Option", args.Option);
    Console.WriteLine ("WasSuspended", args.WasSuspended);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, AVFoundation.AVAudioSessionInterruptionEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("InterruptionType", args.InterruptionType);
    Console.WriteLine ("Option", args.Option);
    Console.WriteLine ("WasSuspended", args.WasSuspended);
}

void Setup ()
{
    notification = AVAudioSession.Notifications.ObserveInterruption (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAudioSession.InterruptionNotification, (notification) => {Console.WriteLine ("Received the notification AVAudioSession", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAudioSession", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAudioSession.InterruptionNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAudioSession.MediaServicesWereResetNotification">
    <summary>Notification constant for MediaServicesWereReset</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="AVFoundation.AVAudioSession.Notifications" />.<see cref="AVFoundation.AVAudioSession.Notifications.ObserveMediaServicesWereReset" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVAudioSession.Notifications.ObserveMediaServicesWereReset ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = AVAudioSession.Notifications.ObserveMediaServicesWereReset (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAudioSession.MediaServicesWereResetNotification, (notification) => {Console.WriteLine ("Received the notification AVAudioSession", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAudioSession", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAudioSession.MediaServicesWereResetNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAudioSession.MediaServicesWereLostNotification">
    <summary>Notification constant for MediaServicesWereLost</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="AVFoundation.AVAudioSession.Notifications" />.<see cref="AVFoundation.AVAudioSession.Notifications.ObserveMediaServicesWereLost" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVAudioSession.Notifications.ObserveMediaServicesWereLost ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = AVAudioSession.Notifications.ObserveMediaServicesWereLost (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAudioSession.MediaServicesWereLostNotification, (notification) => {Console.WriteLine ("Received the notification AVAudioSession", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAudioSession", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAudioSession.MediaServicesWereLostNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAudioSession.RouteChangeNotification">
    <summary>Notification constant for RouteChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="AVFoundation.AVAudioSession.Notifications" />.<see cref="AVFoundation.AVAudioSession.Notifications.ObserveRouteChange" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVAudioSession.Notifications.ObserveRouteChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Reason", args.Reason);
    Console.WriteLine ("PreviousRoute", args.PreviousRoute);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, AVFoundation.AVAudioSessionRouteChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Reason", args.Reason);
    Console.WriteLine ("PreviousRoute", args.PreviousRoute);
}

void Setup ()
{
    notification = AVAudioSession.Notifications.ObserveRouteChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAudioSession.RouteChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAudioSession", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAudioSession", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAudioSession.RouteChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAudioSession.SilenceSecondaryAudioHintNotification">
    <summary>Notification constant for SilenceSecondaryAudioHint</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="AVFoundation.AVAudioSession.Notifications" />.<see cref="AVFoundation.AVAudioSession.Notifications.ObserveSilenceSecondaryAudioHint" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVAudioSession.Notifications.ObserveSilenceSecondaryAudioHint ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Hint", args.Hint);
    Console.WriteLine ("HintType", args.HintType);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, AVFoundation.AVAudioSessionSecondaryAudioHintEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Hint", args.Hint);
    Console.WriteLine ("HintType", args.HintType);
}

void Setup ()
{
    notification = AVAudioSession.Notifications.ObserveSilenceSecondaryAudioHint (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAudioSession.SilenceSecondaryAudioHintNotification, (notification) => {Console.WriteLine ("Received the notification AVAudioSession", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAudioSession", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAudioSession.SilenceSecondaryAudioHintNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="M:AVFoundation.AVAudioSession.SetCategory(Foundation.NSString,Foundation.NSError@)">
    <param name="theCategory">One of 
	<see cref="AVFoundation.AVAudioSession.CategoryAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategorySoloAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayback" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayAndRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryAudioProcessing" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryMultiRoute" />.
	</param>
    <param name="outError">On failure, this contains the error details.</param>
    <summary>Weakly typed; Requests a change to the <see cref="AVFoundation.AVAudioSession.Category" />.</summary>
    <returns>true on success, false on error.   If there is an error the outError parameter contains the new instance of NSError describing the problem.</returns>
    <remarks>
      <para>
	    In general, you should set the category before activating
	    your audio session with <see cref="AVFoundation.AVAudioSession.SetActive(System.Boolean,AVFoundation.AVAudioSessionSetActiveOptions,out Foundation.NSError)" />.
	    If you change the category at runtime, the route will change. 
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:AVFoundation.AVAudioSession.SetCategory(Foundation.NSString)">
    <param name="theCategory">One of 
	<see cref="AVFoundation.AVAudioSession.CategoryAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategorySoloAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayback" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayAndRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryAudioProcessing" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryMultiRoute" />.
	</param>
    <summary>Weakly typed;  Requests a change to the <see cref="AVFoundation.AVAudioSession.Category" />.</summary>
    <returns>
	  null on success, or an instance of NSError in case of failure with the details about the error.
	</returns>
    <remarks>
      <para>
	    In general, you should set the category before activating
	    your audio session with <see cref="AVFoundation.AVAudioSession.SetActive(System.Boolean,AVFoundation.AVAudioSessionSetActiveOptions,out Foundation.NSError)" />.
	    If you change the category at runtime, the route will change. 
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:AVFoundation.AVAudioSession.SetCategory(System.String,AVFoundation.AVAudioSessionCategoryOptions,Foundation.NSError@)">
    <param name="category">One of 
	<see cref="AVFoundation.AVAudioSession.CategoryAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategorySoloAmbient" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayback" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryPlayAndRecord" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryAudioProcessing" />, 
	<see cref="AVFoundation.AVAudioSession.CategoryMultiRoute" />.</param>
    <param name="options">Options on how to handle audio.</param>
    <param name="outError">On failure, this contains the error details.</param>
    <summary>Weakly typed;  Requests a change to the <see cref="AVFoundation.AVAudioSession.Category" />.</summary>
    <returns>
      <see langword="true" /> if the request was successful, otherwise the outError parameter contains an instance of NSError describing the problem.</returns>
    <remarks>
      <para>
	    In general, you should set the category before activating
	    your audio session with <see cref="AVFoundation.AVAudioSession.SetActive(System.Boolean,AVFoundation.AVAudioSessionSetActiveOptions,out Foundation.NSError)" />.
	    If you change the category at runtime, the route will change. 
	  </para>
    </remarks>
  </Docs>
</Documentation>