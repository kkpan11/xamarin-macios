<Documentation>
  <Docs DocId="P:AVFoundation.AVCaptureDevice.WasConnectedNotification">
        <summary>Notification constant for WasConnected</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="AVFoundation.AVCaptureDevice.Notifications" />.<see cref="AVFoundation.AVCaptureDevice.Notifications.ObserveWasConnected" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVCaptureDevice.Notifications.ObserveWasConnected ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = AVCaptureDevice.Notifications.ObserveWasConnected (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVCaptureDevice.WasConnectedNotification, (notification) => {Console.WriteLine ("Received the notification AVCaptureDevice", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVCaptureDevice", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVCaptureDevice.WasConnectedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVCaptureDevice.WasDisconnectedNotification">
        <summary>Notification constant for WasDisconnected</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="AVFoundation.AVCaptureDevice.Notifications" />.<see cref="AVFoundation.AVCaptureDevice.Notifications.ObserveWasDisconnected" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVCaptureDevice.Notifications.ObserveWasDisconnected ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = AVCaptureDevice.Notifications.ObserveWasDisconnected (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVCaptureDevice.WasDisconnectedNotification, (notification) => {Console.WriteLine ("Received the notification AVCaptureDevice", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVCaptureDevice", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVCaptureDevice.WasDisconnectedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVCaptureDevice.SubjectAreaDidChangeNotification">
        <summary>Notification constant for SubjectAreaDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="AVFoundation.AVCaptureDevice.Notifications" />.<see cref="AVFoundation.AVCaptureDevice.Notifications.ObserveSubjectAreaDidChange" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = AVCaptureDevice.Notifications.ObserveSubjectAreaDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = AVCaptureDevice.Notifications.ObserveSubjectAreaDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVCaptureDevice.SubjectAreaDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVCaptureDevice", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVCaptureDevice", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVCaptureDevice.SubjectAreaDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVCaptureDevice.VideoHdrEnabled">
        <summary>Indicates if the device is currently streaming HDR video.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para>Setting this property requires the <see cref="AVFoundation.AVCaptureDevice.ActiveFormat’s" /> IsVideoHdrSupported to be <see langword="true" />, otherwise you will get an exception.</para>
          <para />
          <para>Setting the <see cref="AVFoundation.AVCaptureDevice.ActiveFormat" /> property will change this to <see langword="false" />.  </para>
          <para />
          <para>This property can only be set if you first set <see cref="AVFoundation.AVCaptureDevice.AutomaticallyAdjustsVideoHdrEnabled" /> to <see langword="false" />.</para>
          <para />
          <para>In constrat, setting the <see cref="AVFoundation.AVCaptureSession.SessionPreset" /> will set this property to <see langword="true" /> if the session preset is a good match for HDR video.</para>
        </remarks>
      </Docs>
</Documentation>