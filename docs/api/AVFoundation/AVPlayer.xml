<Documentation>
  <Docs DocId="T:AVFoundation.AVPlayer">
    <summary>Encapsulates the control and UI of a component that plays back single or multiple items.</summary>
    <remarks>
      <para>An <see cref="AVFoundation.AVPlayer" /> links the visual presentation, control, and dynamic state of one or more <see cref="AVFoundation.AVAsset" />s.</para>
      <para>The visual element of the display is done by a <see cref="AVFoundation.AVPlayerLayer" />, while it's current state (current time, etc.) is held in an <see cref="AVFoundation.AVPlayerItem" />, which in turn references an <see cref="AVFoundation.AVAsset" />.</para>
      <para>
        <img href="~/AVFoundation/_images/AVFoundation.AssetPlayerItemPlayer.png" alt="Class diagram showing the important classes related to AssetPlayerItemPlayer" />
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
var asset = AVAsset.FromUrl(NSUrl.FromFilename("sample.m4v"));
var playerItem = new AVPlayerItem(asset);
var player = new AVPlayer(playerItem);
var playerLayer = AVPlayerLayer.FromPlayer(player);
View.Layer.AddSublayer(playerLayer);
player.Play();
          ]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVPlayer_Class/index.html">Apple documentation for <c>AVPlayer</c></related>
  </Docs>
  <Docs DocId="P:AVFoundation.AVPlayer.AvailableHdrModesDidChangeNotification">
    <summary>Notification constant for AvailableHdrModesDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVPlayer.Notifications.ObserveAvailableHdrModesDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVPlayer.AvailableHdrModesDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVPlayer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVPlayer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVPlayer.AvailableHdrModesDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVPlayer.AvailableHdrModesDidChangeNotification">
        <summary>Notification constant for AvailableHdrModesDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVPlayer.Notifications.ObserveAvailableHdrModesDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVPlayer.AvailableHdrModesDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVPlayer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVPlayer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVPlayer.AvailableHdrModesDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVPlayer.AvailableHdrModesDidChangeNotification">
        <summary>Notification constant for AvailableHdrModesDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVPlayer.Notifications.ObserveAvailableHdrModesDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVPlayer.AvailableHdrModesDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVPlayer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVPlayer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVPlayer.AvailableHdrModesDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVPlayer.AvailableHdrModesDidChangeNotification">
        <summary>Notification constant for AvailableHdrModesDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVPlayer.Notifications.ObserveAvailableHdrModesDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVPlayer.AvailableHdrModesDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVPlayer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVPlayer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVPlayer.AvailableHdrModesDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>