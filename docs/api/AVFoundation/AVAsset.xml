<Documentation>
  <Docs DocId="T:AVFoundation.AVAsset">
    <summary>Base class for timed video and audio.</summary>
    <remarks>
      <para>An <see cref="AVFoundation.AVAsset" /> represents one or more media assets. These are held in its <see cref="AVFoundation.AVAsset.Tracks" /> property. Additionally, <see cref="AVFoundation.AVAsset" />s include metadata, track grouping, and preferences about the media.</para>
      <para>Because media assets such as movies are large, instantiating an <see cref="AVFoundation.AVAsset" /> will not automatically load the file. Properties are loaded when they are queried or via explicit calls to <see cref="AVFoundation.AVAsset.LoadValuesTaskAsync(System.String[])" /> or <see cref="AVFoundation.AVAsset.LoadValuesAsynchronously(System.String[],System.Action)" />.</para>
      <para>During playback, the current presentation state of an <see cref="AVFoundation.AVAsset" /> is represented by an <see cref="AVFoundation.AVPlayerItem" /> object, and the playback is controlled by a <see cref="AVFoundation.AVPlayer" />:</para>
      <para>
        <img href="~/AVFoundation/_images/AVFoundation.AssetPlayerItemPlayer.png" alt="UML Class Diagram illustrating classes relating to AVAsset" />
      </para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAsset_Class/index.html">Apple documentation for <c>AVAsset</c></related>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.ChapterMetadataGroupsDidChangeNotification">
    <summary>Notification constant for ChapterMetadataGroupsDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.ChapterMetadataGroupsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.ChapterMetadataGroupsDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.DurationDidChangeNotification">
    <summary>Notification constant for DurationDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.DurationDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.DurationDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.MediaSelectionGroupsDidChangeNotification">
    <summary>Notification constant for MediaSelectionGroupsDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.MediaSelectionGroupsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.MediaSelectionGroupsDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.WasDefragmentedNotification">
    <summary>Notification constant for WasDefragmented</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVAsset.Notifications.ObserveWasDefragmented" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.WasDefragmentedNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.WasDefragmentedNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.ContainsFragmentsDidChangeNotification">
    <summary>Notification constant for ContainsFragmentsDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVAsset.Notifications.ObserveContainsFragmentsDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.ContainsFragmentsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.ContainsFragmentsDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.DurationDidChangeNotification">
        <summary>Notification constant for DurationDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.DurationDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.DurationDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.ChapterMetadataGroupsDidChangeNotification">
        <summary>Notification constant for ChapterMetadataGroupsDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.ChapterMetadataGroupsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.ChapterMetadataGroupsDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.MediaSelectionGroupsDidChangeNotification">
        <summary>Notification constant for MediaSelectionGroupsDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.MediaSelectionGroupsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.MediaSelectionGroupsDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.WasDefragmentedNotification">
        <summary>Notification constant for WasDefragmented</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVAsset.Notifications.ObserveWasDefragmented" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.WasDefragmentedNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.WasDefragmentedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AVFoundation.AVAsset.ContainsFragmentsDidChangeNotification">
        <summary>Notification constant for ContainsFragmentsDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="AVFoundation.AVAsset.Notifications.ObserveContainsFragmentsDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        AVAsset.ContainsFragmentsDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification AVAsset", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification AVAsset", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (AVAsset.ContainsFragmentsDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>