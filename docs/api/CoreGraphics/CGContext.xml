<Documentation>
  <Docs DocId="M:CoreGraphics.CGContext.GetCTM">
    <summary>Retrieves the current Context Transformation Matrix.</summary>
    <returns>The <see cref="CoreGraphics.CGAffineTransform" /> currently being used by the <see cref="CoreGraphics.CGContext" />.</returns>
    <remarks>
      <para>The <see cref="CoreGraphics.CGContext" /> has, as part of its drawing state, a <see cref="CoreGraphics.CGAffineTransform" /> called the Context Transformation Matrix (CTM).</para>
      <para>By default, the CTM's X and Y axes increase to the right and downward, as indicated by the red rays in the following image. </para>
      <para>A common transform is to locate the origin in the lower left-hand corner, with X and Y increasing to the right and upward, as shown with the green rays in the following image (note that, for visibility, the rays are set to originate at (5,5) rather than (0,0)). This is done with <c>ScaleCTM(1,-1)</c> and  <c>TranslateCTM(0, -Bounds.Height)</c> (see example below).</para>
      <para>More complex transforms are, possible, as illustrated by the blue rays, which illustrate a transform that is both translated and rotated. Note that manipulation of the CTM is stateful and order-dependent: the final transform is translated and rotated relative to the CTM used to the draw the 2nd-to-last green rays.</para>
      <para>
        <img href="~/CoreGraphics/_images/CGContext.CTM.png" alt="Graphic illustrating the transforms created by the following code." />
      </para>
      <para>The following example shows the manipulation of the CTM to create the example image.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
public override void Draw (CGRect rect)
{
	base.Draw (rect);

	using (var ctxt = UIGraphics.GetCurrentContext ()) {
		DrawRay (ctxt, new CGPoint (5, 5), new CGPoint (105, 5), UIColor.Red.CGColor);
		DrawRay (ctxt, new CGPoint (5, 5), new CGPoint (5, 105), UIColor.Red.CGColor);
		ctxt.ScaleCTM (1, -1);
		ctxt.TranslateCTM (0, -Bounds.Height);
		DrawRay (ctxt, new CGPoint (5, 5), new CGPoint (105, 5), UIColor.Green.CGColor);
		DrawRay (ctxt, new CGPoint (5, 5), new CGPoint (5, 105), UIColor.Green.CGColor);

		var cos = .707f;
		var sin = -.707f;
		var xform = new CGAffineTransform (cos, sin, -sin, cos, Bounds.Width / 2, 100);

		ctxt.ConcatCTM (xform);
		DrawRay (ctxt, new CGPoint (0, 0), new CGPoint (100, 0), UIColor.Blue.CGColor);
		DrawRay (ctxt, new CGPoint (0, 0), new CGPoint (0, 100), UIColor.Blue.CGColor);

	}
}              
              ]]></code>
      </example>
    </remarks>
    <altmember cref="CoreGraphics.CGContext.ConcatCTM" />
    <altmember cref="CoreGraphics.CGContext.RotateCTM" />
    <altmember cref="CoreGraphics.CGContext.ScaleCTM" />
    <altmember cref="CoreGraphics.CGContext.TranslateCTM" />
  </Docs>
  <Docs DocId="M:CoreGraphics.CGContext.AddLines(CoreGraphics.CGPoint[])">
    <param name="points">An array of two or more <see cref="CGPoint" />s. Straight segments are added between sequential points.</param>
    <summary>Adds the given lines to the current path.</summary>
    <remarks>
      <para>Lines are added to the current path, with the first line segment beginning at <paramref name="points" />[0]. A line is not added from the <see cref="CoreGraphics.CGContext.GetPathCurrentPoint" />. In the following example, the current location of the <see cref="CoreGraphics.CGContext" /> is {20,20} after the call to <see cref="CoreGraphics.CGContext.MoveTo(nfloat,nfloat)" />, but as shown in the image, only two line segments are added.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
using (var ctxt = UIGraphics.GetCurrentContext ()) {
	var startingPoint = new CGPoint (20, 20);
	ctxt.MoveTo (startingPoint.X, startingPoint.Y);
	ctxt.SetStrokeColor (UIColor.Red.CGColor);
	var sz = new CGSize (2, 2);
	Func<CGPoint,CGPoint> offset = (CGPoint pt) => new CGPoint (pt.X - 1, pt.Y - 1);
	ctxt.AddEllipseInRect (new CGRect (offset (startingPoint), sz));

	ctxt.AddLines (new CGPoint[] {
		new CGPoint (30, 30),
		new CGPoint (60, 30),
		new CGPoint (40, 40)
	});

	ctxt.StrokePath ();
}              
              ]]></code>
      </example>
      <para>
        <img href="~/CoreGraphics/_images/CGContext.AddLines.png" alt="Graphic illustrating the curve created by calling this method" />
      </para>
    </remarks>
  </Docs>
  <Docs DocId="M:CoreGraphics.CGContext.DrawPDFPage(CoreGraphics.CGPDFPage)">
    <param name="page">The PDF page to be rendered.</param>
    <summary>Renders the specified PDF <paramref name="page" />.</summary>
    <remarks>
      <para>The following example shows how to render the first page of a PDF file:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
doc = CGPDFDocument.FromFile (Path.Combine (NSBundle.MainBundle.BundlePath, "Images/QuartzImageDrawing.pdf"));
if (doc == null)
		throw new Exception ("Could not load document");

using (var ctxt = UIGraphics.GetCurrentContext ()) {
  // PDF page drawing expects a Lower-Left coordinate system, so we flip the coordinate system
	// before we start drawing.
	context.TranslateCTM (0, Bounds.Height);
	context.ScaleCTM (1, -1);

	// Grab the first PDF page
	using (CGPDFPage page = doc.GetPage (1)){
		// We're about to modify the context CTM to draw the PDF page where we want it, so save the graphics state in case we want to do more drawing
		context.SaveState ();
		
		// CGPDFPageGetDrawingTransform provides an easy way to get the transform for a PDF page. It will scale down to fit, including any
		// base rotations necessary to display the PDF page correctly.
		
		CGAffineTransform pdfTransform = page.GetDrawingTransform (CGPDFBox.Crop, Bounds, 0, true);

		// And apply the transform.
		context.ConcatCTM (pdfTransform);
		// Finally, we draw the page and restore the graphics state for further manipulations!
		context.DrawPDFPage (page);
		context.RestoreState();
	}				
}
          ]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="M:CoreGraphics.CGContext.AsBitmapContext">
    <summary>Casts the <see cref="CGContext" /> into a <see cref="CGBitmapContext" />.</summary>
    <returns>
    </returns>
    <remarks>
      <para>
      While there are different kinds of <see cref="CGContext" /> kinds (regular, bitmap and PDF), Apple does not support a way
      to tell those apart. In some cases <see cref="CGContext" /> objects are actually known to be <see cref="CGBitmapContext" /> objects in a few
	    situations (calling <see cref="UIKit.UIGraphics.GetImageFromCurrentImageContext" /> after creating a 
	    context with <see cref="UIKit.UIGraphics.BeginImageContext(CoreGraphics.CGSize)" /> or <see cref="UIKit.UIGraphics.BeginImageContextWithOptions(CoreGraphics.CGSize,System.Boolean,nfloat)" />).
	  </para>
      <para>
      Those are really <see cref="CGBitmapContext" /> objects and by converting it, application developers can access the various bitmap properties
	    on it.
	  </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
UIGraphics.BeginImageContextWithOptions (image.Size, false, UIScreen.MainScreen.Scale);
CGBitmapContext effectInContext = UIGraphics.GetCurrentContext ().AsBitmapContext ()
 
// Now, you can access some interesting properties like "Data", "Width", 
// "Height", "BytesPerRow" from the underlying bitmap
 
var effectInBuffer = new vImageBuffer () {
        Data = effectInContext.Data,
        Width = effectInContext.Width,
        Height = effectInContext.Height,
        BytesPerRow = effectInContext.BytesPerRow
};
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="M:CoreGraphics.CGContext.AsBitmapContext" Platforms="macOS">
    <summary>Casts the <see cref="CGContext" /> into a <see cref="CGBitmapContext" />.</summary>
    <returns>
    </returns>
    <remarks>
      <para>
      While there are different kinds of <see cref="CGContext" /> kinds (regular, bitmap and PDF), Apple does not support a way
      to tell those apart. In some cases <see cref="CGContext" /> objects are actually known to be <see cref="CGBitmapContext" /> objects in a few
      situations.
    </para>
      <para>
      Those are really <see cref="CGBitmapContext" /> objects and by converting it, application developers can access the various bitmap properties
      on it.
    </para>
    </remarks>
  </Docs>
  <Docs DocId="T:CoreGraphics.CGContext">
    <summary>Graphics context and primitives to draw in them.</summary>
    <remarks>
      <para>A <see cref="CoreGraphics.CGContext" /> is a Quartz 2D destination for drawing. It holds parameters and their states (set with functions such as <see cref="CoreGraphics.CGContext.SetFillColor(CGColor)" />) and device information (for instance, <see cref="CoreGraphics.CGContext.ConvertSizeToDeviceSpace(CoreGraphics.CGSize)" />). <see cref="CoreGraphics.CGContext" />s may represent a screen area, a bitmap, a PDF document, or a printer.</para>
      <para>There are a limited number of <see cref="CoreGraphics.CGContext" />s available and application developer's should be conscientious about disposing of them after use. Generally, that means putting the drawing code in <c>using</c> blocks, as shown in the following example:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
public override void Draw (CGRect rect)
{
    base.Draw (rect);
    using (var context = UIGraphics.GetCurrentContext ())
    {
        // draw a rectangle using a path
	var myRectangleButtonPath = new CGPath ();
	myRectangleButtonPath.AddRect (new CGRect (new CGPoint (100, 10), new CGPoint (200, 400)));
	context.AddPath (myRectangleButtonPath);
	context.DrawPath (CGPathDrawingMode.Stroke);
    }
}          
          ]]></code>
      </example>
      <para>The example additionally shows the very common pattern of an overridden <see cref="UIKit.UIView.Draw(CoreGraphics.CGRect)" /> method in a custom <see cref="UIKit.UIView" /> and the use of <see cref="UIKit.UIGraphics.GetImageFromCurrentImageContext" /> to retrieve the current <see cref="CoreGraphics.CGContext" /> on which to draw.</para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/AVTouchSample/">avTouch</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Drawing/">Example_Drawing</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/QuartzSample/">QuartzSample</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/ZoomingPdfViewer/">ZoomingPdfViewer</related>
  </Docs>
  <Docs DocId="T:CoreGraphics.CGContext" Platforms="macOS">
    <summary>Graphics context and primitives to draw in them.</summary>
    <remarks>
      <para>A <see cref="CoreGraphics.CGContext" /> is a Quartz 2D destination for drawing. It holds parameters and their states (set with functions such as <see cref="CoreGraphics.CGContext.SetFillColor(CGColor)" />) and device information (for instance, <see cref="CoreGraphics.CGContext.ConvertSizeToDeviceSpace(CoreGraphics.CGSize)" />). <see cref="CoreGraphics.CGContext" />s may represent a screen area, a bitmap, a PDF document, or a printer.</para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/AVTouchSample/">avTouch</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Drawing/">Example_Drawing</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/QuartzSample/">QuartzSample</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/ZoomingPdfViewer/">ZoomingPdfViewer</related>
  </Docs>
</Documentation>