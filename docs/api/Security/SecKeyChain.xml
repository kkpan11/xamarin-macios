<Documentation>
  <Docs DocId="M:Security.SecKeyChain.QueryAsData(Security.SecRecord,System.Boolean,Security.SecStatusCode@)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <param name="wantPersistentReference">If set to true, the returned NSData can be stored on disk for later used, or shared between processes.</param>
    <param name="status">Returns the status code from calling SecItemCopyMatching.</param>
    <summary>Fetches a set of NSData records from the Keychain.</summary>
    <summary>Fetches an NSData record from the Keychain.</summary>
    <returns>The NSData associated with the given query.</returns>
    <remarks>
      <para>
	    The returned NSData is a binary blob, if you want to get a
	    high-level representation, use <see cref="SecKeyChain.QueryAsRecord(SecRecord, out SecStatusCode)" /> or <see cref="SecKeyChain.QueryAsRecord(SecRecord, int, out SecStatusCode)" />
	    instead.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnData set to true and kSecMatchLimit to 1,
	    forcing a single record to be returned.  If
	    wantPersistentReference is true, this also sets the
	    kSecReturnPersistentRef dictionary key to true.

	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Security.SecKeyChain.QueryAsData(Security.SecRecord,System.Boolean,System.Int32,Security.SecStatusCode@)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <param name="wantPersistentReference">If set to true, the returned NSData can be stored on disk for later used, or shared between processes.</param>
    <param name="max">Maximum number of values to return.</param>
    <param name="status">Returns the status code from calling SecItemCopyMatching.</param>
    <summary>Fetches a set of NSData records from the Keychain.</summary>
    <returns>An array of NSData records associated with the given query.</returns>
    <remarks>
      <para>
	    The returned NSData is a binary blob, if you want to get a
	    high-level representation, use <see cref="SecKeyChain.QueryAsRecord(SecRecord, out SecStatusCode)" /> or <see cref="SecKeyChain.QueryAsRecord(SecRecord, int, out SecStatusCode)" />
	    instead.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnData set to true and kSecMatchLimit set to the value of max,
	    forcing that many record to be returned.  If
	    wantPersistentReference is true, this also sets the
	    kSecReturnPersistentRef dictionary key to true.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Security.SecKeyChain.QueryAsData(Security.SecRecord)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <summary>Fetches an NSData record from the Keychain.</summary>
    <returns>The NSData associated with the given query.</returns>
    <remarks>
      <para>
	    The returned NSData is a binary blob, if you want to get a
	    high-level representation, use <see cref="SecKeyChain.QueryAsRecord(SecRecord, out SecStatusCode)" /> or <see cref="SecKeyChain.QueryAsRecord(SecRecord, int, out SecStatusCode)" />
	    instead.
	  </para>
      <para>
	    The returned NSData is not suitable for storing on disk or
	    passing to another process.  If you want that, you should
	    use the overload that takes the bool
	    wantPersistentReference parameter and set that to true.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnData set to true and kSecMatchLimit to 1,
	    forcing a single record to be returned.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Security.SecKeyChain.QueryAsData(Security.SecRecord,System.Int32)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <param name="max">Maximum number of values to return.</param>
    <summary>Fetches a set of NSData records from the Keychain.</summary>
    <returns>An array of NSData records associated with the given query.</returns>
    <remarks>
      <para>
	    The returned NSData is a binary blob, if you want to get a
	    high-level representation, use <see cref="SecKeyChain.QueryAsRecord(SecRecord, out SecStatusCode)" /> or <see cref="SecKeyChain.QueryAsRecord(SecRecord, int, out SecStatusCode)" />
	    instead.
	  </para>
      <para>
	    The returned NSData is not suitable for storing on disk or
	    passing to another process.  If you want that, you should
	    use the overload that takes the bool
	    wantPersistentReference parameter and set that to true.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnData set to true and kSecMatchLimit set to the value of max,
	    forcing that many record to be returned.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Security.SecKeyChain.QueryAsRecord(Security.SecRecord,System.Int32,Security.SecStatusCode@)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <param name="max">Maximum number of values to return.</param>
    <param name="result">Returns the status code from calling SecItemCopyMatching.</param>
    <summary>Fetches one or more SecRecords.</summary>
    <returns>Returns an array of strongly typed SecRecord objects.</returns>
    <remarks>
      <para>
	    Unlike the <see cref="Security.SecKeyChain.QueryAsData(Security.SecRecord,System.Boolean,System.Int32,out Security.SecStatusCode)" />
	    methods which return a binary blob inside an NSData, this
	    returns a strongly typed SecRecord that you can easily
	    inspect.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnData set to true, kSecReturnAttributes set to
	    true and kSecMatchLimit set to max, which returns at most
	    that many records.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:Security.SecKeyChain.QueryAsConcreteType(Security.SecRecord,Security.SecStatusCode@)">
    <param name="query">The query used to lookup the value on the keychain.</param>
    <param name="result">Returns the status code from calling SecItemCopyMatching.</param>
    <summary>Use this method to query the KeyChain and get back a <see cref="Security.SecCertificate" />, a <see cref="Security.SecKey" /> or a <see cref="Security.SecIdentity" />.</summary>
    <returns>An object that can be one of <see cref="Security.SecCertificate" />, a <see cref="Security.SecKey" /> or a <see cref="Security.SecIdentity" /> or null if there is no value found. </returns>
    <remarks>
      <para>
	    This method will throw an exception if the KeyChain
	    contains a new data type that you have introduced with a
	    newer version of Xamarin.iOS into the keychain and you
	    then try to use this with an older version that does not
	    have the ability of decoding theve value.
	  </para>
      <para>
	    This is the strongly typed equivalent of calling the
	    Security's framework SecItemCopyMatching method with the
	    kSecReturnRef set to true.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="T:Security.SecKeyChain">
    <summary>Access to the operating system keychain.</summary>
    <remarks>
      <para>
	This class can be used to add, remove, update or query the iOS
	or MacOS keychain.  MacOS is limited to a single kind of
	password (SecKind.InternetPassword) while iOS offers a wider
	range of options.
      </para>
      <para>
	Use <see cref="Security.SecKeyChain.QueryAsData(Security.SecRecord,System.Boolean,System.Int32,out Security.SecStatusCode)" />
	to get values from the keychain as a binary blob.  Some of the
	overloads can also return binary blobs that are suitable to be
	stored on disk, or passed to another process.
      </para>
      <para>
	Use <see cref="Security.SecKeyChain.QueryAsConcreteType(Security.SecRecord,out Security.SecStatusCode)" />
	to get a <see cref="Security.SecCertificate" />, a
	<see cref="Security.SecKey" /> or a <see cref="Security.SecIdentity" /> back from the
	keychain.
      </para>
      <para>
	Use use <see cref="SecKeyChain.QueryAsRecord(SecRecord, out SecStatusCode)" /> or <see cref="SecKeyChain.QueryAsRecord(SecRecord, int, out SecStatusCode)" /> to get
	a strongly typed SecRecord with the results of your query.
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
var query = new SecRecord (SecKind.InternetPassword) {
   Server = "bugzilla.novell.com",
   Account = "miguel"
};
var password = SecKeyChain.QueryAsData (query);
Console.WriteLine ("The password for the account is: {0}", password);

  ]]></code>
      </example>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/LineLayout/">Keychain</related>
  </Docs>
</Documentation>