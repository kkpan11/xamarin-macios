<Documentation>
  <Docs DocId="M:CoreFoundation.CFStream.CreatePairWithPeerSocketSignature(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.IPEndPoint,CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@)">
    <param name="family">Address family to use.</param>
    <param name="type">Desired socket type.</param>
    <param name="proto">Desired protocol type.</param>
    <param name="endpoint">Endpoint to connect to.</param>
    <param name="readStream">On return, contains a stream that can
	be used to read from that end point.</param>
    <param name="writeStream">On return, contains a stream that
	can be used to write to the end point.</param>
    <summary>Creates a reading and a writing CFStream to an
        endpoint that are configured to use a specific socket address
        family, a socket type and a protocol.</summary>
    <remarks>
      <para>
	    Use this method when you need more control over the type
	    of connection that you need.   Unlike the other methods in
	    CFStream which default to TCP/IP streams (which sets protocol to
	    Internet, socket type to stream and protocol to TCP) with
	    this method you can specify those parameter individually.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="M:CoreFoundation.CFStream.Dispose(System.Boolean)">
    <param name="disposing">
      <para>If set to <see langword="true" />, the method is invoked directly and will dispose managed and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
    </param>
    <summary>Releases the resources used by the CFStream object.</summary>
    <remarks>
      <para>This Dispose method releases the resources used by the CFStream class.</para>
      <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
      <para>Calling the Dispose method when the application is finished using the CFStream ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
      <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
    </remarks>
  </Docs>
  <Docs DocId="T:CoreFoundation.CFStream">
    <summary>An abstract class that defines a stream for reading or writing bytes - modern applications should use the <see cref="Network" /> APIs instead.</summary>
    <remarks>
      <format type="text/html">
        <h2>Converting CFStreams to NSStreams</h2>
      </format>
      <para>
	If you need to turn a CFStream into an NSStream, or an
	NSStream subclass, you can do so by surfacing an NSStream
	version of the method like this:
      </para>
      <example>
        <code lang="c#"><![CDATA[
CFReadStream readStream;
CFWriteStream writeStream;
CFStream.CreatePairWithSocketToHost("www.google.com", 80, out readStream, out writeStream);

// 
// Get NSStream variatns
//
_inputStream = ObjCRuntime.Runtime.GetNSObject<NSInputStream>(readStream.Handle);
_outputStream =
ObjCRuntime.Runtime.GetNSObject<NSOutputStream>(writeStream.Handle);
]]></code>
      </example>
    </remarks>
  </Docs>
</Documentation>