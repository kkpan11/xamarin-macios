<Documentation>
  <Docs DocId="T:UIKit.UIDocument">
    <summary>Abstract base class providing local and cloud-based management of Model data.</summary>
    <remarks>
      <para>
        Application developers can subclass <see cref="UIDocument" /> to create objects that are "Model-Controllers" and
        relate to Model (domain) objects analogously to how <see cref="UIViewController" /> relate to <see cref="UIView" />s.
        UIKit provides a number of functions, including background asynchronous reading and writing of application data,
        automatic and safe data-saving, storage that is automatically coordinated between the application sandbox and cloud services, etc.
      </para>
      <para>
        At a minimum, application developers need to implement <see cref="ContentsForType(string,out NSError)" /> (for storage) and
        <see cref="LoadFromContents(NSObject,string,out NSError)" /> (for retrieval). Additionally, application developers need to
        manage the lifecyle of the <see cref="UIDocument" /> and this requires the application developer to set the preferred storage
        location, create a file URL, and discover, open, and close the file. Application developers should also track changes and resolve
        conflicts between document versions.
      </para>
      <para>
        The members of this class can be used from a background thread.
      </para>
    </remarks>
    <related type="article" href="https://github.com/conceptdev/taskcloud">TaskCloud</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocument_Class/index.html">Apple documentation for <c>UIDocument</c></related>
  </Docs>
  <Docs DocId="P:UIKit.UIDocument.StateChangedNotification">
        <summary>Notification constant for StateChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UIDocument.Notifications" />.<see cref="UIKit.UIDocument.Notifications.ObserveStateChanged" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIDocument.Notifications.ObserveStateChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UIDocument.Notifications.ObserveStateChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIDocument.StateChangedNotification, (notification) => {Console.WriteLine ("Received the notification UIDocument", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIDocument", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIDocument.StateChangedNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
</Documentation>