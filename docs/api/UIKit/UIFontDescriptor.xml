<Documentation>
  <Docs DocId="T:UIKit.UIFontDescriptor">
    <summary>Describes properties of a font, use to create fonts with certain features.   Provides ways of finding fonts matching a description as well.</summary>
    <remarks>
      <para> Developers create UIFontDescriptors with a set of
	parameters they are interested in (font faces, font families,
	font attributes, fallbacks).  You can consider these
	descriptors queries, which you can later use to create a
	concrete UIFont wit by using the <see cref="UIKit.UIFont.FromDescriptor(UIKit.UIFontDescriptor,nfloat)" /> method.
      </para>
      <para>
	These objects are immutable, once created, they can not be
	changed.  But given a UIFontDescriptor, you can create a more
	precise font descriptor instance with new information.  You
	can create a new UIFontDescriptor with more detailed font
	attributes using the <see cref="UIKit.UIFontDescriptor.CreateWithAttributes(UIKit.UIFontAttributes)" />
	method, extend one by explicitly setting a font face or font family using the <see cref="UIKit.UIFontDescriptor.CreateWithFace(System.String)" /> and <see cref="UIKit.UIFontDescriptor.CreateWithFamily(System.String)" /> methods, specify a desired font size or a transformation matrix with the <see cref="UIKit.UIFontDescriptor.CreateWithSize(nfloat)" /> and <see cref="UIKit.UIFontDescriptor.CreateWithMatrix(CoreGraphics.CGAffineTransform)" /> methods, or request that certain stylistic traits be present with <see cref="UIKit.UIFontDescriptor.CreateWithTraits(UIKit.UIFontDescriptorSymbolicTraits)" />.

      </para>
      <para>
	This class exposes various static properties that return the
	UIFontDescriptor that matches the user's global preferences
	(font sizes) as well as the system font.   These properties are: 
	<see cref="UIKit.UIFontDescriptor.PreferredHeadline" />,
	<see cref="UIKit.UIFontDescriptor.PreferredBody" />,
	<see cref="UIKit.UIFontDescriptor.PreferredSubheadline" />,
	<see cref="UIKit.UIFontDescriptor.PreferredFootnote" />,
	<see cref="UIKit.UIFontDescriptor.PreferredCaption1" /> and
	<see cref="UIKit.UIFontDescriptor.PreferredCaption2" />.
      </para>
      <para> You can use the <see cref="UIKit.UIFontDescriptor.GetMatchingFontDescriptors(UIKit.UIFontDescriptorAttribute[])" /> method to get a set of UIFontDescriptors that match your
	font explicitly, or you can use <see cref="UIKit.UIFontDescriptor.CreateWithTraits(UIKit.UIFontDescriptorSymbolicTraits)" />
	and <see cref="UIKit.UIFont.FromDescriptor(UIKit.UIFontDescriptor,nfloat)" />
	methods to match implicitly.
      </para>
      <para>
	The following example shows how to create two fonts: one with
	the preferred font for body text, and then a bold version of
	the same font:
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[

// Creates a UIFont for the body text
var bodyDescriptor = UIFontDescriptor.PreferredBody;
UIFont bodyFont = UIFont.FromDescriptor (bodyDescriptor, 0);
	  
// Creates a bold version of it:
var boldDescriptor = bodyDescriptor.CreateWithTraits (UIFontDescriptorSymbolicTraits.Bold);
UIFont boldBodyFont = UIFont.FromDescriptor (boldDescriptor, 0);

]]></code>
      </example>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIFontDescriptor_Class/index.html">Apple documentation for <c>UIFontDescriptor</c></related>
  </Docs>
  <Docs DocId="P:UIKit.UIFontDescriptor.FeatureSettings">
        <summary>Typographic and layout feature settings.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    This property is an array of UIFontFeature objects, each
	    representing a font-specific typograph or layout feature
	    that can be enabled in the font.  For background on Font
	    Features, you can read
	    https://developer.apple.com/fonts/registry

	  </para>
          <para>
	    The following example shows how to configure the font to
	    use proportional numbers as well as informing the
	    rendering engine to use the 1st Character Alternatives available in this font. 
	  </para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
UIFont CustomizeFont (UIFont font)
{
    var originalDescriptor = font.FontDescriptor;
    var attributes = new UIFontAttributes (
        new UIFontFeature (CTFontFeatureNumberSpacing.Selector.ProportionalNumbers),
	new UIFontFeature ((CTFontFeatureCharacterAlternatives.Selector)1));

    var newDesc = originalDescriptor.CreateWithAttributes (attributes);
    return UIFont.FromDescriptor (newDesc, 80);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
</Documentation>