<Documentation>
  <Docs DocId="T:UIKit.NSTextStorage">
    <summary>A subclass of <see cref="Foundation.NSMutableAttributedString" /> that supports Core Text layout management.</summary>
    <remarks>
      <para>iOS 7 introduced "Text Kit," a broad set of APIs and modifications of existing classes, built on <see cref="CoreText" />, that greatly expands the typographical flexibility of iOS.</para>
      <para> 
	An <see cref="UIKit.NSTextStorage" /> object holds
	the text that is to be displayed. As with <see cref="Foundation.NSMutableAttributedString" />,
	application developers can manipulate text styles using <see cref="Foundation.NSMutableAttributedString.AddAttribute(Foundation.NSString,Foundation.NSObject,Foundation.NSRange)" /> or <see cref="Foundation.NSMutableAttributedString.AddAttributes" />. The key addition to <see cref="UIKit.NSTextStorage" /> is that it maintains
	references to one or more <see cref="UIKit.NSLayoutManager" />s (<see cref="UIKit.NSTextStorage.LayoutManagers" />) ,
	which are responsible for converting text characters into
	glyphs and laying them out in accordance with the <see cref="UIKit.NSLayoutManager" />s' associated <see cref="UIKit.UITextView" /> and <see cref="UIKit.NSTextContainer" /> objects.

      </para>
      <para>
	If you subclass NSTextStorage, you must override four methods.  Two from NSAttributedString (<see cref="Foundation.NSAttributedString.LowLevelValue" /> and <see cref="Foundation.NSAttributedString.LowLevelGetAttributes(System.IntPtr,out Foundation.NSRange)" />) and two from NSMutableAttributedString (<see cref="Foundation.NSMutableAttributedString.LowLevelSetAttributes(System.IntPtr,Foundation.NSRange)" /> and <see cref="Foundation.NSMutableAttributedString.Replace(Foundation.NSRange,System.String)" />). 
      </para>
      <para>
	The reason why you must override the low-level methods is
	because NSTextStorage is a very chatty interface that likes to
	call those methods up to thousands of times for each character
	that the user enters.  So it important to use the low-level
	interface.  You can review some of Xamarin's samples to see
	how to implement those if you have questions on how to do this.

      </para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSTextStorage_Class_TextKit/index.html">Apple documentation for <c>NSTextStorage</c></related>
  </Docs>
</Documentation>