<Documentation>
  <Docs DocId="T:UIKit.UIPasteboard">
    <summary>Support for the system pasteboard  for cut, copy and paste.</summary>
    <remarks>
      <format type="text/html">
        <h2>Pasteboards</h2>
      </format>
      <para>
	Pasteboards allow information to be shared across
	applications.  The general pasteboard (accessible via the <see cref="UIKit.UIPasteboard.General" /> property) is
	the system-wide pasteboard that applications use by default.
	Developers can also transfer information across their own
	applications (those that share their team ID) by creating
	their own pasteboards.
      </para>
      <format type="text/html">
        <h2>Setting Pasteboard Data</h2>
      </format>
      <para>
	All operations that set the contents of the pasteboard clear any data
	that is currently stored there.
      </para>
      <para>
	To set the pasteboard contents to <see cref="Foundation.NSString" />, <see cref="Foundation.NSArray" />, <see cref="Foundation.NSDictionary" />, <see cref="Foundation.NSDate" />, <see cref="Foundation.NSNumber" />, <see cref="UIKit.UIImage" /> or <see cref="Foundation.NSUrl" /> use
	the <see cref="UIKit.UIPasteboard.SetValue(Foundation.NSObject,System.String)" /> method.
      </para>
      <para>
	To set the pasteboard contents to an image, use the
	<see cref="UIKit.UIPasteBoard.Image" />.  
	property.
      </para>
      <para>
	To set the pasteboard contents to a set of images, use the
	<see cref="UIKit.UIPasteboard.Images" />.  
	property.
      </para>
      <para>
	To set the values to arbitrary data types, use the
	<see cref="UIKit.UIPasteBoard.SetData" /> method.
      </para>
      <para>
	You can use the convenience properties <see cref="UIKit.UIPasteboard.String" />, <see cref="UIKit.UIPasteboard.Strings" />, <see cref="UIKit.UIPasteboard.Image" />, <see cref="UIKit.UIPasteboard.Images" />, <see cref="UIKit.UIPasteboard.Url" />, <see cref="UIKit.UIPasteboard.Urls" />, <see cref="UIKit.UIPasteboard.Color" /> and <see cref="UIKit.UIPasteboard.Colors" /> to set and get
	strings, images, Urls or Colors on the pasteboard.
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Setting the contents of the pasteboard to "Hello World"
// by specifying the UTI type for text.
//
var text = new NSString ("Hello world")
UIPasteboard.General.SetValue (text, MonoTouch.MobileCoreServices.UTType.Text);

// 
// Setting the contents of the pasteboard to "So hello"
// using the convenience property:
//
UIPasteboard.General.String = "So hello";
	]]></code>
      </example>
      <format type="text/html">
        <h2>Pasteboard Types</h2>
      </format>
      <para>
	Whenever possible, you should use an UTI type to set the type
	of the information that is being stored on the pasteboard.
	You can find a list of common iOS/Mac UTI types on the <see cref="MobileCoreServices.UTType" /> type.

      </para>
      <para>
	UTI types are merely strings separated by dots.  For example
	the UTI type for an image is "public.image".  Apple maintains
	the "public.*" directory of UTI types.  	
      </para>
      <para>
	Apple recommends that if you need to use your own data type to
	use an inverse domain to name them.   For example, "com.xamarin.t-shirt-application.sales-information". 

      </para>
    </remarks>
    <related type="article" href="https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html">Introduction to Uniform Type Identifiers Overview</related>
    <related type="article" href="https://en.wikipedia.org/wiki/Uniform_Type_Identifier">"Uniform Type Identifier" on Wikipedia</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPasteboard_Class/index.html">Apple documentation for <c>UIPasteboard</c></related>
  </Docs>
  <Docs DocId="P:UIKit.UIPasteboard.ChangedNotification">
        <summary>Notification constant for Changed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="UIKit.UIPasteboard.Notifications" />.<see cref="UIKit.UIPasteboard.Notifications.ObserveChanged" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIPasteboard.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, UIKit.UIPasteboardChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
}

void Setup ()
{
    notification = UIPasteboard.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIPasteboard.ChangedNotification, (notification) => {Console.WriteLine ("Received the notification UIPasteboard", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIPasteboard", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIPasteboard.ChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:UIKit.UIPasteboard.RemovedNotification">
        <summary>Notification constant for Removed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="UIKit.UIPasteboard.Notifications" />.<see cref="UIKit.UIPasteboard.Notifications.ObserveRemoved" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIPasteboard.Notifications.ObserveRemoved ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, UIKit.UIPasteboardChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
}

void Setup ()
{
    notification = UIPasteboard.Notifications.ObserveRemoved (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIPasteboard.RemovedNotification, (notification) => {Console.WriteLine ("Received the notification UIPasteboard", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIPasteboard", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIPasteboard.RemovedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>