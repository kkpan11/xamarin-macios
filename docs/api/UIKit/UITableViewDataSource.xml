<Documentation>
  <Docs DocId="T:UIKit.UITableViewDataSource">
    <summary>The data source for a <see cref="UIKit.UITableView" />. Xamarin.iOS developers should prefer to use <see cref="UIKit.UITableViewSource" /> instead of this class.</summary>
    <remarks>
      <para>Implementing <see cref="UIKit.UITableView" /> often requires subclasses of both <see cref="UIKit.UITableViewDataSource" /> and <see cref="UIKit.UITableViewDelegate" /> to provide data and behavior for the table view. Xamarin.iOS provides a single class - <see cref="UIKit.UITableViewSource" /> - so that only one class needs to be implemented.</para>
      <para>The <see cref="UIKit.UITableViewDataSource" /> class methods provide a table view with all the information it requires to display its data - such as informing it of the number of sections and rows, and what cell view to use for each row.</para>
      <para>The universally-important function of <see cref="UIKit.UITableViewDataSource" /> is to provide individual <see cref="UIKit.UITableViewCell" />s in response to calls to <see cref="UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" />. That call takes as arguments the <see cref="UIKit.UITableView" /> in question and an <see cref="Foundation.NSIndexPath" />. That <see cref="Foundation.NSIndexPath" /> is based, in turn, on calls to <see cref="UIKit.UITableViewDataSource.NumberOfSections(UIKit.UITableView)" /> and <see cref="UIKit.UITableViewDataSource.RowsInSection(UIKit.UITableView,System.IntPtr)" />, so the application developer must, at a minimum, override these three functions. (The <see cref="UIKit.UITableView" /> additionally calls <see cref="UIKit.UITableViewDelegate.GetHeightForRow(UIKit.UITableView,Foundation.NSIndexPath)" /> and other layout-related methods for header and footer views and the application developer must override these as appropriate.)</para>
      <para>Static tables may return references to pre-allocated <see cref="UIKit.UITableViewCell" />s from calls to <see cref="UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" />. Dynamic tables should use the <see cref="UIKit.UITableView" />'s built-in cell reuse cache by calling <see cref="UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" />. In iOS 6 and later, application developers should use <see cref="UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> or <see cref="UIKit.UITableView.RegisterNibForCellReuse(UIKit.UINib,System.String)" /> during initialization, in which case <see cref="UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> will instantiate new <see cref="UIKit.UITableViewCell" />s as necessary. If application developers are targeting earlier iOS versions, their override of <see cref="UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> must check for an <see langword="null" /> return from <see cref="UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> and instantiate a <see cref="UIKit.UITableViewCell" /> as necessary. </para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html">Apple documentation for <c>UITableViewDataSource</c></related>
  </Docs>
  <Docs DocId="M:UIKit.UITableViewDataSource.SectionFor(UIKit.UITableView,System.String,System.IntPtr)">
    <param name="tableView">Table view containing the section.</param>
    <param name="title">The title that's displayed in the table view's index.</param>
    <param name="atIndex">The index of the title in the array returned from the <see cref="UIKit.UITableViewSource.SectionIndexTitles(UIKit.UITableView)" />.</param>
    <summary>Returns the index of the section with the given <paramref name="tableView" /> and <paramref name="atIndex" />.</summary>
    <returns>The index of the section in the table view.</returns>
    <remarks>
      <para>This method is only required for table views that have an index: they must have the <see cref="UIKit.UITableViewStyle.Plain" /> style and implement the <see cref="UIKit.UITableViewSource.SectionIndexTitles(UIKit.UITableView)" /> property.</para>
      <para>The index for a table view may contain fewer items than the number of actual sections in the table. This method is passed the text and index of an item in the index, and should return the position of the corresponding section. </para>
    </remarks>
  </Docs>
</Documentation>