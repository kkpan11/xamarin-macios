<Documentation>
  <Docs DocId="T:UIKit.UIMenuController">
    <summary>The class used to implement Cut, Copy, Paste, Select, and Delete commands.</summary>
    <remarks>
      <para>The <see cref="UIKit.UIMenuController" /> is a singleton object, accessed by <see cref="UIKit.UIMenuController.SharedMenuController" />. It manages the editng menu, which provides options for Cut, Copy, Paste, Select, Select All, and Delete commands. The menu is visually associated with a target rectangle specified by <see cref="UIKit.UIMenuController.SetTargetRect(CoreGraphics.CGRect,UIKit.UIView)" />. It is the application developer's responsibility to set this target rectangle appropriately before displaying the <see cref="UIKit.UIMenuController" />.  </para>
      <para>The application can add or delete additional menu items using the <see cref="UIKit.UIMenuController.MenuItems" />. The following code, taken from the "Touches Gesture Recognizers" sample shows the code necessary to create a modified context menu:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
void Setup ()
{
     var menuController = UIMenuController.SharedMenuController;
     var resetMenuItem = new UIMenuItem ("Reset", new Selector ("ResetImage"));
     var location = gestureRecognizer.LocationInView (gestureRecognizer.View);
     BecomeFirstResponder ();
     menuController.MenuItems = new [] { resetMenuItem };
     menuController.SetTargetRect (new CGRect (location.X, location.Y, 0, 0), gestureRecognizer.View);
     menuController.MenuVisible = true;
     menuController.Animated = true;
     imageForReset = gestureRecognizer.View;
}         

...
          
[Export("ResetImage")]
void ResetImage (UIMenuController controller)
{
     var mid = new CGPoint ((imageForReset.Bounds.Left + imageForReset.Bounds.Right) / 2, (imageForReset.Bounds.Top + imageForReset.Bounds.Bottom) / 2);
     var locationInSuperview = imageForReset.ConvertPointToView (mid, imageForReset.Superview);
     imageForReset.Layer.AnchorPoint = new CGPoint (0.5f, 0.5f);
     imageForReset.Center =locationInSuperview;
     
     UIView.BeginAnimations (null, IntPtr.Zero);
     imageForReset.Transform = MonoTouch.CoreGraphics.CGAffineTransform.MakeIdentity ();
     UIView.CommitAnimations ();
}
        ]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UIMenuController_Class/index.html">Apple documentation for <c>UIMenuController</c></related>
  </Docs>
  <Docs DocId="P:UIKit.UIMenuController.WillShowMenuNotification">
        <summary>Notification constant for WillShowMenu</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UIMenuController.Notifications" />.<see cref="UIKit.UIMenuController.Notifications.ObserveWillShowMenu" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIMenuController.Notifications.ObserveWillShowMenu ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UIMenuController.Notifications.ObserveWillShowMenu (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIMenuController.WillShowMenuNotification, (notification) => {Console.WriteLine ("Received the notification UIMenuController", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIMenuController", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.WillShowMenuNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:UIKit.UIMenuController.WillHideMenuNotification">
        <summary>Notification constant for WillHideMenu</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UIMenuController.Notifications" />.<see cref="UIKit.UIMenuController.Notifications.ObserveWillHideMenu" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIMenuController.Notifications.ObserveWillHideMenu ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UIMenuController.Notifications.ObserveWillHideMenu (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIMenuController.WillHideMenuNotification, (notification) => {Console.WriteLine ("Received the notification UIMenuController", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIMenuController", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.WillHideMenuNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:UIKit.UIMenuController.DidShowMenuNotification">
        <summary>Notification constant for DidShowMenu</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UIMenuController.Notifications" />.<see cref="UIKit.UIMenuController.Notifications.ObserveDidShowMenu" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIMenuController.Notifications.ObserveDidShowMenu ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UIMenuController.Notifications.ObserveDidShowMenu (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIMenuController.DidShowMenuNotification, (notification) => {Console.WriteLine ("Received the notification UIMenuController", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIMenuController", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.DidShowMenuNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:UIKit.UIMenuController.DidHideMenuNotification">
        <summary>Notification constant for DidHideMenu</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UIMenuController.Notifications" />.<see cref="UIKit.UIMenuController.Notifications.ObserveDidHideMenu" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UIMenuController.Notifications.ObserveDidHideMenu ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UIMenuController.Notifications.ObserveDidHideMenu (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIMenuController.DidHideMenuNotification, (notification) => {Console.WriteLine ("Received the notification UIMenuController", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIMenuController", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.DidHideMenuNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:UIKit.UIMenuController.MenuFrameDidChangeNotification">
        <summary>Notification constant for MenuFrameDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIMenuController.MenuFrameDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIMenuController", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIMenuController", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.MenuFrameDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>