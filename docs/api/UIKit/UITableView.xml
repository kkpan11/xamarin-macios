<Documentation>
  <Docs DocId="T:UIKit.UITableView">
    <summary>A table view is used to display and edit hierarchical lists of information. A UITableView is limited to a single column because it is designed for a small screen.</summary>
    <remarks>
      <para>
        <see cref="UIKit.UITableView" /> is a subclass of <see cref="UIKit.UIScrollView" /> that allows users to scroll the table vertically (the closely-related <see cref="UIKit.UICollectionView" /> class allows for horizontal scrolling and complex two-dimensional layouts). The table consists of <see cref="UIKit.UITableViewCell" /> objects that are used to render the rows of the table. These cells have content -- labels, images, etc. -- and can also show accessories such as disclosure arrows or inputs controls. <see cref="UIKit.UITableView" />s can enter an edit-mode in which rows can be inserted, deleted, and reordered.
      </para>
      <para>
        The Xamarin article </para>
      <format type="text/html">
        <a href="https://docs.xamarin.com/guides/ios/user_interface/tables">Working with Tables</a>
      </format> provides guidance on all aspects of <see cref="UIKit.UITableView" /> use. 
      <para /><para>For most use-cases, it is not necessary for application developers to subclass <see cref="UIKit.UITableView" /> or <see cref="UIKit.UITableViewController" />, which provide the generic table behavior. Instead, application developers will generally subclass <see cref="UIKit.UITableViewSource" /> to populate a table and, often, <see cref="UIKit.UITableViewCell" /> to customize appearance and row behavior.</para><format type="text/html"><h2>Table Parts and Functionality</h2></format><format type="text/html"><h3>Classes Overview</h3></format><para>The primary classes used to display table views are:</para><para><img href="~/UIKit/_images/UIKit.UITableView.Classes.png" alt="UML class diagram describing important classes relating to the UITableView type" /></para><list type="table"><listheader><term>Class</term><description>Responsibility</description></listheader><item><term><see cref="UIKit.UITableView" /></term><description>
            A view that contains a collection of cells inside a scrolling container. The table view typically uses the entire screen in an iPhone app but may exist as part of a larger view on the iPad (or appear in a popover).  
          </description></item><item><term><see cref="UIKit.UITableViewCell" /></term><description>
            A view that represents a single cell (or row) in a table view. There are four built-in cell types and it is possible to create custom cells both in C# or with Interface Builder.
          </description></item><item><term><see cref="UIKit.UITableViewSource" /></term><description>
            Xamarin.iOS-exclusive abstract class that provides all the methods required to display a table, including row count, returning a cell view for each row, handling row selection and many other optional features. You must subclass this to get a <see cref="UIKit.UITableView" /> working. (<see cref="UIKit.UITableViewSource" /> combines <see cref="UIKit.UITableViewDataSource" /> and <see cref="UIKit.UITableViewDelegate" />. These classes are still available if the application developer chooses not to use <see cref="UIKit.UITableViewSource" />.)
          </description></item><item><term><see cref="Foundation.NSIndexPath" /></term><description>
            Contains Row and Section properties that uniquely identify the position of a cell in a table.</description></item><item><term><see cref="UIKit.UITableViewController" /></term><description>
            A ready-to-use <see cref="UIKit.UIViewController" /> that has a <see cref="UIKit.UITableView" /> hardcoded as its view and made accessible via the <see cref="UIKit.UITableViewController.TableView" /> property. </description></item><item><term><see cref="UIKit.UIViewController" /></term><description>
            If the table does not occupy the entire screen you can add a <see cref="UIKit.UITableView" /> to any <see cref="UIKit.UIViewController" /> with its <see cref="UIKit.UIView.Frame" /> property set appropriately.</description></item></list><format type="text/html"><h3>Components of a UITableView</h3></format><para>There are two <see cref="UIKit.UITableViewStyle" /> styles: Plain and Grouped. The Plain style allows the section headers and footers to remain visible as the section is scrolled through, and can optionally support an index that appears along the right edge to quickly scroll to a specific section. The Grouped style displays sections in rounded-rectangles that visually group the rows, and provides a default background image behind the scrolling list. The style of the <see cref="UIKit.UITableView" /> is specified as an argument to the <see cref="UIKit.UITableView(CGRect, UITableViewStyle)" /> constructor and cannot be changed.  Grouped tables should not provide an index.</para><para>Tables consist of the following parts:</para><list type="table"><listheader><term>Element</term><description>Accessed via:</description><description>Type</description></listheader><item><term>Table Header</term><description><see cref="UIKit.UITableView.TableHeaderView" /></description><description><see cref="UIKit.UIView" /></description></item><item><term>Section Header</term><description><see cref="UIKit.UITableViewSource.GetViewForHeader(UIKit.UITableView,System.IntPtr)" /></description><description><see cref="UIKit.UITableViewHeaderFooterView" /></description></item><item><term>Cells (also called Rows)</term><description><see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /></description><description><see cref="UIKit.UITableViewCell" /></description></item><item><term>Section Footer</term><description><see cref="UIKit.UITableViewSource.GetViewForFooter(UIKit.UITableView,System.IntPtr)" /></description><description><see cref="UIKit.UITableViewHeaderFooterView" /></description></item><item><term>Index</term><description><see cref="UIKit.UITableViewSource.SectionIndexTitles(UIKit.UITableView)" /></description><description><see langword="string" /><c>[]</c></description></item><item><term>Edit mode (includes ‘swipe to delete’ and drag handles to change row order)</term><description /><description /></item><item><term>Table Footer</term><description><see cref="UIKit.UITableView.TableFooterView" /></description><description><see cref="UIKit.UIView" /></description></item></list><para>Section rows, headers, footers, edit controls and the index are displayed as follows:</para><para><img href="~/UIKit/_images/UIKit.UITableView.Components.png" alt="Screenshot of various components in a UITableView" /></para><format type="text/html"><h2>Populating Table Cells</h2></format><para><see cref="UIKit.UITableView" />s are designed to work efficiently with tables with thousands of rows. In order to achieve this, each <see cref="UIKit.UITableView" /> maintains a reusable cache of <see cref="UIKit.UITableViewCell" />s only a few items larger than can be shown on the screen at any given time.
      </para><para>A <see cref="UIKit.UITableViewSource" /> object is responsible for managing the relationship between the relatively few <see cref="UIKit.UITableViewCell" />s and the data is to be displayed. The <see cref="UIKit.UITableViewSource" />'s <see cref="UIKit.UITableViewSource.NumberOfSections(UIKit.UITableView)" /> and <see cref="UIKit.UITableViewSource.RowsInSection(UIKit.UITableView,System.IntPtr)" /> methods allow the <see cref="UIKit.UITableView" /> to request only the data necessary for the cells on the screen. A specific cell is identified by an <see cref="Foundation.NSIndexPath" />, whose <see cref="Foundation.NSIndexPath.Section" /> and <see cref="Foundation.NSIndexPath.Row" />properties will specify a unique cell.</para><para>As cells are about to be scrolled onto the screen, the <see cref="UIKit.UITableView" /> automatically calls the <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method of the <see cref="UIKit.UITableViewSource" /> object assigned to the <see cref="UIKit.UITableView.Source" /> property of the <see cref="UIKit.UITableView" /> (or, if the application developer prefers, the <see cref="UIKit.UITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method of the <see cref="UIKit.UITableViewDataSource" /> object referred to by the <see cref="UIKit.UITableView.DataSource" /> property). </para><para>The application developer's responsibilities when overriding <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> changed with the introduction of iOS 6. Application developers targeting iOS 6 and later should register a <see cref="UIKit.UITableViewCell" /> for reuse with the <see cref="UIKit.UITableView" /> by calling either the <see cref="UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> or <see cref="UIKit.UITableView.RegisterNibForCellReuse(UIKit.UINib,System.String)" /> method. Once that is done, application developers do not need to check for null in their override of the <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method.</para><para>If application developers are using the <see cref="UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> with their own subclass of <see cref="UIKit.UITableViewCell" />, that implementation must override the <see cref="UIKit.UITableViewCell(NativeHandle)" /> constructor and call the base constructor (i.e., <c>MyTableViewCell(NativeHandle handle) : base(handle){}</c>).</para><para>The application developer overrides the <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method so that it:</para><list type="bullet"><item><term>Attempts to retrieve a previously-allocated <see cref="UIKit.UITableViewCell" /> from the <see cref="UIKit.UITableView" />;</term></item><item><term>If programming in iOS 5 and earlier, if that fails, initializes a new <see cref="UIKit.UITableViewCell" /> of the appropriate type;</term></item><item><term>Change the state of the retrieved-or-created <see cref="UIKit.UITableViewCell" /> so that it reflects the values appropriate for the passed-in <see cref="Foundation.NSIndexPath" />.
          </term></item></list><para>Since the <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method will be called whenever a cell comes into view, application developers should avoid unnecessary computation.</para><para>The <see cref="UIKit.UITableView" />'s reuse queue is accessed via the <see cref="UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> method, which takes a <see langword="string" /> identifying the type of <see cref="UIKit.UITableViewCell" /> to retrieve. In iOS 5 and earlier, that method may return <see langword="null" />, in which case the application developer should instantiate a new <see cref="UIKit.UITableViewCell" />. In iOS 6 and later, while initializing the <see cref="UIKit.UITableView" />, the application developer must use either <see cref="UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> or <see cref="UIKit.UITableView.RegisterNibForCellReuse(UIKit.UINib,System.String)" /> to associate a <see cref="UIKit.UITableViewCell" /> type and it's reuse identifier so that the method <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> can instantiate instances as necessary.</para><para>The following shows a simple example of the <see cref="UIKit.UITableViewSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" /> method:</para><example><code lang="csharp lang-csharp"><![CDATA[
          public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
          {
          //Attempt to retrieve previously-allocated cell
          var cell = tableView.DequeueReusableCell (this.cellTypeIdentifier);
          //The following check and code-block only necessary in applications that do not use RegisterClassforCellReuse or RegisterNibForCellReuse
          if (cell == null) {
          //No reusable cell, so initialize a new one
          cell = new UITableViewCell (UITableViewCellStyle.Default, this.cellTypeIdentifier);
          cell.Tag = Environment.TickCount;
          }
          
          // Change the state of the cell
          cell.TextLabel.Text = //...etc...
          
          // return the cell
          return cell;
          }
          ]]></code></example><format type="text/html"><h2>Customizing Table Appearance</h2></format><para>Other than the <see cref="UIKit.UITableView.Style" /> property that specifies whether a <see cref="UIKit.UITableView" /> is grouped or continuous, the appearance of the table is primarily determined by the <see cref="UIKit.UITableViewCell" />s, the <see cref="UIKit.UITableViewHeaderFooterView" />s used for section headers and footers, and the <see cref="UIKit.UIView" />s used for the <see cref="UIKit.UITableView.TableHeaderView" /> and <see cref="UIKit.UITableView.TableFooterView" /> properties. The API documentation for <see cref="UIKit.UITableViewCell" /> describes customization in detail. </para><format type="text/html"><h2>Highlighting and Selection</h2></format><para>Selecting and highlighting in a <see cref="UIKit.UITableView" /> follows this sequence:</para><list type="table"><listheader><term>User Action</term><description>UITableViewDelegate (UITableViewSource) Methods</description><description>UITableViewCell Properties</description></listheader><item><term>Nothing touched</term><description /><description><c>Highlighted == <see langword="false" />; Selected == <see langword="false" /></c></description></item><item><term>Finger down in cell</term><description><see cref="UIKit.UITableViewDelegate.ShouldHighlightRow(UIKit.UITableView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="false" />, processing stops. 
          </description><description /></item><item><term /><description><see cref="UIKit.UITableViewSource.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)" /> is called.
          </description><description><c>Highlighted == <see langword="true" />; Selected == <see langword="false" /></c></description></item><item><term>Finger up</term><description><see cref="UIKit.UITableViewDelegate.WillSelectRow(UIKit.UITableView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="null" />, processing stops. Otherwise, whatever <see cref="Foundation.NSIndexPath" /> it returns will be highlighted.
          </description><description /></item><item><term /><description><see cref="UIKit.UITableViewDelegate.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)" /> is called. <see cref="UIKit.UITableViewDelegate.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)" /> is called.
            
          </description><description><c>Highlighted == <see langword="false" />; Selected == <see langword="true" /></c></description></item></list><para><img href="~/UIKit/_images/UIKit.UITableView.HighlightAndSelect.png" alt="Sequence diagram showing the method calls associated with highlighting and selecting in a UITableView" /></para><para>Deselecting a <see cref="UIKit.UITableViewCell" /> follows a similar sequence:</para><list type="table"><listheader><term>User Action</term><description>UITableViewDelegate (UITableViewSource) Methods</description><description>UITableViewCell Properties</description></listheader><item><term>Nothing touched while some <see cref="UIKit.UITableViewCell" /> is highlighted.</term><description /><description><c>Highlighted == <see langword="false" />; Selected == <see langword="true" /></c></description></item><item><term>Finger taps cell (Deselect gesture)</term><description><see cref="UIKit.UITableViewDelegate.WillDeselectRow(UIKit.UITableView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="null" />, processing stops. Otherwise, whatever <see cref="Foundation.NSIndexPath" /> is returned will be deselected. 
          </description><description /></item><item><term /><description><see cref="UIKit.UITableViewDelegate.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)" /> is called.
          </description><description><c>Highlighted == <see langword="false" />; Selected == <see langword="false" /></c></description></item></list><block subset="none" type="note"><para>UITableView caches <see cref="UIKit.UITableViewCell" /> objects only for visible rows, but caches the heights of rows, headers and footers for the entire table. It is possible to create custom <see cref="UIKit.UITableViewCell" /> objects with varying heights and custom layouts.</para><para>UITableView overrides <see cref="UIKit.UIView.LayoutSubviews" /> so that it calls <see cref="UIKit.UITableView.ReloadData" /> only when you create a new instance or when you assign a new <see cref="UIKit.UITableView.Source" /> (or <see cref="UIKit.UITableView.DataSource" />).Reloading the table view clears current state (including the current selection). However if you explicitly call <see cref="UIKit.UITableView.ReloadData" /> it clears this state and any subsequent direct or indirect call to <see cref="UIKit.UIView.LayoutSubviews" /> does not trigger a reload.</para></block></remarks>
    <related type="article" href="https://docs.xamarin.com/guides/ios/user_interface/tables">Working with Tables and Cells</related>
    <related type="recipe" href="https://docs.xamarin.com/recipes/ios/content_controls/tables">Tables and UITableViewController</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/index.html">Apple documentation for <c>UITableView</c></related>
  </Docs>
  <Docs DocId="M:UIKit.UITableView.RegisterClassForHeaderFooterViewReuse(System.Type,Foundation.NSString)">
    <param name="cellType">The type of a UIView to create when the specified reuseIdentifier is passed to DequeueReusableCell.</param>
    <param name="reuseIdentifier">The reuse identifier.</param>
    <summary>Registers a type to provide UIViews for headers or footers for a specific reuseIdentifier.</summary>
    <remarks>
      <para>
              You can use this method to register the type of a class
              that should be instantiated if the UITableView needs to
              create a new header or footer in response to a request in
              DequeueReusableHeaderFooterView for the specified reuseIdentifier.
              
            </para>
      <para>
              Registering types with reuse identifiers helps reduce the
              amount of code that you have to write in your GetFooterView or GetHeaderView methods.
              It means that your code only needs to
              call DequeueReusableHeaderFooterView with the reuse identifier, and
              if there is no available cell, the UITableView will
              create an instance of the specified type and return it.
              
            </para>
      <para> 
              The type that you register must provide a constructor
              that takes an <see cref="NativeHandle" /> constructor and needs to chain to
              the <see cref="UIKit.UIView(NativeHandle)" />
              constructor.
            </para>
    </remarks>
  </Docs>
  <Docs DocId="M:UIKit.UITableView.RegisterClassForCellReuse(System.Type,Foundation.NSString)">
    <param name="cellType">The type of a UITableViewCell to create when the specified reuseIdentifier is passed to DequeueReusableCell.</param>
    <param name="reuseIdentifier">The reuse identifier.</param>
    <summary>Registers a type to provide UITableViewCells for a specific reuseIdentifier.</summary>
    <remarks>
      <para>
              Mono can use this method to register the type of a class
              that should be instantiated if the UITableView needs to
              create a new cell in response to a request in
              DequeueReusableCell for the specified reuseIdentifier.
              
            </para>
      <para>
              Registering types with cell identifiers helps reduce the
              amount of code that you have to write in your GetCell
              method.  It means that your GetCell method only needs to
              call DequeueReusableCell with the reuse identifier, and
              if there is no available cell, the UITableView will
              create an instance of the specified type and return it.
              
            </para>
      <para> 
              The type that you register must provide a constructor
              that takes an IntPtr constructor and needs to chain to
              the <see cref="UIKit.UITableViewCell(NativeHandle)" />
              constructor.
              
            </para>
    </remarks>
  </Docs>
  <Docs DocId="P:UIKit.UITableView.SelectionDidChangeNotification">
    <summary>Notification constant for SelectionDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UITableView.Notifications" />.<see cref="UIKit.UITableView.Notifications.ObserveSelectionDidChange" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UITableView.Notifications.ObserveSelectionDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITableView.Notifications.ObserveSelectionDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITableView.SelectionDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UITableView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITableView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITableView.SelectionDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="M:UIKit.UITableView.DequeueReusableCell(Foundation.NSString)">
    <param name="identifier">A string identifying the cell type being requested.</param>
    <summary>Returns a reusable table view cell that was created with the given ReuseIdentifier.</summary>
    <returns>A <see cref="UIKit.UITableViewCell" /> associated with the <paramref name="identifier" />, or <see langword="null" /> if there is no cells in the queue with that particular <paramref name="identifier" />.</returns>
    <remarks>
      <para>The cell reuse cache is important for efficiency and application developers should use it for dynamic tables. </para>
      <para>Application developers targeting iOS 6 and later should use <see cref="UIKit.UITableView.RegisterClassForCellReuse(System.Type,System.String)" /> or <see cref="UIKit.UITableView.RegisterNibForCellReuse(UIKit.UINib,System.String)" />. Once a <see cref="UIKit.UITableViewCell" /> class is registered, calls to <see cref="UIKit.UITableView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" /> will return a newly-instantiated object as necessary, rather than returning <see langword="null" />.</para>
      <para>Application developers should prefer the use of <see cref="UIKit.UITableView.DequeueReusableCell(Foundation.NSString,Foundation.NSIndexPath)" />, which returns a <see cref="UIKit.UITableViewCell" /> that is properly sized for the index path.</para>
    </remarks>
    <altmember cref="UIKit.UITableView.RegisterClassForCellReuse" />
    <altmember cref="UIKit.UITableView.RegisterNibForCellReuse" />
  </Docs>
  <Docs DocId="M:UIKit.UITableView.MoveSection(System.IntPtr,System.IntPtr)">
        <param name="fromSection">Index of the section to move.</param>
        <param name="toSection">Destination index for the section. The section currently at this index is moved up or down to accomodate the moved section.</param>
        <summary>Moves a section to a new location in the table view.</summary>
        <remarks>
          <para>This method can be combined with other MoveSection, <see cref="UIKit.UITableView.InsertSections(Foundation.NSIndexSet,UIKit.UITableViewRowAnimation)" /> and <see cref="UIKit.UITableView.DeleteSections(Foundation.NSIndexSet,UIKit.UITableViewRowAnimation)" /> operations within an animation block defined by <see cref="UIKit.UITableView.BeginUpdates" /> and <see cref="UIKit.UITableView.EndUpdates" />, so that all the changes occur in a single animation.</para>
          <para>Unlike the insertion and deletion methods, moving a section does not use an animation paramter. Moved sections always animate straight from their starting position to their new position. Only one section can be moved per method call, however to move multiple sections application developers can call this method repeatedly within a <see cref="UIKit.UITableView.BeginUpdates" />-<see cref="UIKit.UITableView.EndUpdates" /> animation block.</para>
        </remarks>
      </Docs>
</Documentation>