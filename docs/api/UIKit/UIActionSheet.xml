<Documentation>
  <Docs DocId="T:UIKit.UIActionSheet">
    <summary>A <see cref="UIKit.UIView" /> that displays an action sheet with one or more buttons. (As of iOS 8, devs should use <see cref="UIKit.UIAlertController" /> rather than this class.)</summary>
    <remarks>
      <para>As of iOS 8, app devs should use <see cref="UIKit.UIAlertController" /> rather than this class. Extensions may not use this class at all.</para>
      <para>
        The <see cref="UIKit.UIActionSheet" /> control is a convenient way to allow the application user to choose among alternative actions. The following code and diagram are taken from the "Action Sheets" section of the "iOS Standard Controls" sample.
      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
protected void HandleBtnActionSheetWithOtherButtonsTouchUpInside (object sender, EventArgs e)
{
	actionSheet = new UIActionSheet ("action sheet with other buttons");
	actionSheet.AddButton ("delete");
	actionSheet.AddButton ("cancel");
	actionSheet.AddButton ("a different option!");
	actionSheet.AddButton ("another option");
	actionSheet.DestructiveButtonIndex = 0;
	actionSheet.CancelButtonIndex = 1;
	//actionSheet.FirstOtherButtonIndex = 2;
	actionSheet.Clicked += delegate(object a, UIButtonEventArgs b) {
		Console.WriteLine ("Button " + b.ButtonIndex.ToString () + " clicked");
	};
	actionSheet.ShowInView (View);
	
}
          ]]></code>
      </example>
      <para>
        <img href="~/UIKit/_images/UIKit.UIActionSheet.png" alt="Screenshot showing the UIActionSheet" />
      </para>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="UIKit.UIActionSheetDelegate" /> class and assign it to the <see cref="UIKit.Delegate" /> property.   Alternatively, for low-level control, by creating a class derived from <see cref="Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="UIKit.UIActionSheet.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActionSheet_Class/index.html">Apple documentation for <c>UIActionSheet</c></related>
  </Docs>
  <Docs DocId="M:UIKit.UIActionSheet.#ctor(System.String,UIKit.IUIActionSheetDelegate,System.String,System.String,System.String[])">
        <param name="title">A title to be displayed in the title area of the action sheet.</param>
        <param name="del">A delegate that will respond to taps in the action sheet.</param>
        <param name="cancelTitle">The title of the Cancel button. This will be displayed in a black button.</param>
        <param name="destroy">The title of the destructive button. This will be displayed in a red button.</param>
        <param name="other">An array of <see cref="System.String" /> to use for other buttons in the <see cref="UIKit.UIActionSheet" />.</param>
        <summary>Initializes a <see cref="UIKit.UIActionSheet" /> instance.</summary>
        <remarks>
          <para>Pass <see langword="null" /> to <paramref name="title" /> if there is no text to display in the title area.</para>
          <para>If the action sheet is being presented on an iPad, then the <paramref name="cancelTitle" /> should be set to <see langword="null" />.</para>
        </remarks>
      </Docs>
</Documentation>