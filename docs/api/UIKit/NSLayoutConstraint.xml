<Documentation>
  <Docs DocId="T:UIKit.NSLayoutConstraint">
    <summary>A relationship between two layout attributes used in a constraint-based layout.</summary>
    <remarks>
      <para>An <see cref="UIKit.NSLayoutConstraint" /> specifies the relationship between two layout attributes (<see cref="UIKit.NSLayoutConstraint.FirstAttribute" /> and <see cref="UIKit.NSLayoutConstraint.SecondAttribute" />, both of which are of type <see cref="UIKit.NSLayoutAttribute" />) in a constraint-based layout.</para>
      <para>The relationship consists of:</para>
      <list type="bullet">
        <item>
          <term>A <see cref="UIKit.NSLayoutRelation" /> (e.g., <see cref="UIKit.NSLayoutRelation.GreaterThanOrEqual" />)</term>
        </item>
        <item>
          <term>A floating point <see cref="UIKit.NSLayoutConstraint.Multiplier" /></term>
        </item>
        <item>
          <term>A single-precision floating point <see cref="UIKit.NSLayoutConstraint.Constant" /></term>
        </item>
        <item>
          <term>A floating point <see cref="UIKit.NSLayoutConstraint.Priority" />. Constraints with higher priorities are satisfied before constraints with lower priorities.</term>
        </item>
      </list>
      <para>The constraint engine will set the value of the <see cref="UIKit.NSLayoutConstraint.FirstAttribute" /> such that it satisfies the constraint <c>FirstAttribute &lt;Relation&gt; &lt;Constant&gt; + &lt;Multiplier&gt; * &lt;SecondAttribute&gt;</c>.  For instance, in the following code from the "Media Notes" sample, <c>tconstraint2</c> is a constraint that specifies that the top of the <c>toolbar</c> is going to be equal to the top of the <c>View</c> plus the value of the <c>toolbarVerticalOffset</c>, while <c>tconstraint1</c> specifies that the width of the <c>toolbar</c> will be equal to the width of the <c>View</c>. Both of these constraints have a <see cref="UIKit.NSLayoutConstraint.Priority" /> of <c>1.0</c>.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
var tconstraint2 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Top, NSLayoutRelation.Equal,
                                                View, NSLayoutAttribute.Top, 1.0f, toolbarVerticalOffset);
toolbarTopConstraint = tconstraint2;
var tconstraint1 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Width, NSLayoutRelation.Equal,
                                                View, NSLayoutAttribute.Width, 1.0f, 0.0f);
]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/index.html">Apple documentation for <c>NSLayoutConstraint</c></related>
  </Docs>
  <Docs DocId="M:UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,System.Object[])">
    <param name="format">Visual format to use to create the constraints.</param>
    <param name="formatOptions">options.</param>
    <param name="viewsAndMetrics">
      <para>Pairs of names and values.   The names should be strings (or NSStrings) and the values should be either UIViews, numbers (any C# number or NSNumber) or <see cref="ObjCRuntime.INativeObject" /> instances that are suitable to be passed to the underlying engine. </para>
      <para>
      </para>
      <para> This binds the provided name with the view or binds the name with the number as a metric.</para>
    </param>
    <summary>Factory method for creating a constraint using Visual Format Language.</summary>
    <returns>An array of layout constraints that are suitable to be added to a <see cref="View" /> using <see cref="View.AddConstraints(NSLayoutConstraint[])" /> method.</returns>
    <remarks>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
NSLayoutConstraint.FromVisualFormat ("|-8-[messageView]-8-|", NSLayoutOptions.None, "messageView", MakeMessageView ());
	    ]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="M:UIKit.NSLayoutConstraint.ActivateConstraints(UIKit.NSLayoutConstraint[])">
    <param name="constraints">Constraints to activate.</param>
    <summary>Activates all of the constraints passed.</summary>
    <remarks>
      <para>This method has the same effect as setting the <see cref="UIKit.NSLayoutConstraint.Active" /> property to <see langword="true" />.</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
var blueView = new ContentView(UIColor.Blue);
view.AddSubview(blueView);

blueView.TranslatesAutoresizingMaskIntoConstraints = false;
var blueConstraints = new []
{ 
    blueView.LeadingAnchor.ConstraintEqualTo(greenView.LeadingAnchor),
    blueView.TrailingAnchor.ConstraintEqualTo(greenView.TrailingAnchor),
    blueView.TopAnchor.ConstraintEqualTo(greenView.BottomAnchor, 10.0f),
    blueView.HeightAnchor.ConstraintEqualTo(greenView.HeightAnchor),
    blueView.WidthAnchor.ConstraintEqualTo(greenView.WidthAnchor)
};

NSLayoutConstraint.ActivateConstraints(blueConstraints);

    ]]></code>
      </example>
      <para>
        <img href="~/UIKit/_images/UIKit.NSLayoutAnchor.png" alt="Screenshot showing the resulting layout" />
      </para>
    </remarks>
  </Docs>
  <Docs DocId="M:UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,Foundation.NSDictionary,Foundation.NSDictionary)">
    <param name="format">Visual format to use to create the constraints.</param>
    <param name="formatOptions">options.</param>
    <param name="metrics">
      <para>Dictionary containing mapping names to numbers, where each name is associated with the given metric.</para>
      <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
    </param>
    <param name="views">Dictionary containing mappings of names to UIViews.</param>
    <summary>Factory method for creating a constraint using Visual Format Language.</summary>
    <returns>An array of layout constraints that are suitable to be added to a <see cref="View" /> using <see cref="View.AddConstraints(NSLayoutConstraint[])" /> method.</returns>
    <remarks>
      <para>It is easier to use the <see cref="UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,System.Object[])" /> overload as it combines support for both metrics and views in a single call.</para>
    </remarks>
  </Docs>
  <Docs DocId="M:UIKit.NSLayoutConstraint.Create(Foundation.NSObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,Foundation.NSObject,UIKit.NSLayoutAttribute,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
        <param name="view1">First view in the constraint.</param>
        <param name="attribute1">Attribute for the first view.</param>
        <param name="relation">Relationships between the <paramref name="view1" /> and the <paramref name="view2" />.</param>
        <param name="view2">
          <para>Second view in the constraint.</para>
          <para>This parameter can be <see langword="null" />.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="attribute2">Attribute for the second view.</param>
        <param name="multiplier">Multiplier applied to the second attribute.</param>
        <param name="constant">Constants to add.</param>
        <summary>Factory method for creating a constraint.</summary>
        <returns>
          <para>New constraint with the specified parameters.</para>
          <para>
          </para>
        </returns>
        <remarks>
          <para>Creates a constraint relationship between the <paramref name="view1" /> and the <paramref name="view2" /> that satisfies the following linear equation:</para>
          <para>
          </para>
          <para>
            <paramref name="attribute1" /> = <paramref name="multiplier" /> x <paramref name="attribute2" /> + <paramref name="constant" /></para>
        </remarks>
      </Docs>
  <Docs DocId="M:UIKit.NSLayoutConstraint.Create(ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
        <param name="view1">First view in the constraint.</param>
        <param name="attribute1">Attribute for the first view.</param>
        <param name="relation">Relationships between the <paramref name="view1" /> and the <paramref name="view2" />.</param>
        <param name="view2">
          <para>Second view in the constraint.</para>
          <para>This parameter can be <see langword="null" />.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="attribute2">Attribute for the second view.</param>
        <param name="multiplier">Multiplier applied to the second attribute.</param>
        <param name="constant">Constants to add.</param>
        <summary>Factory method for creating a constraint.</summary>
        <returns>New constraint with the specified parameters.</returns>
        <remarks>
          <para>Creates a constraint relationship between the <paramref name="view1" /> and the <paramref name="view2" /> that satisfies the following linear equation:</para>
          <para>
          </para>
          <para>
            <paramref name="attribute1" /> = <paramref name="multiplier" /> x <paramref name="attribute2" /> + <paramref name="constant" /></para>
        </remarks>
      </Docs>
</Documentation>