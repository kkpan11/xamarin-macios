<Documentation>
  <Docs DocId="T:UIKit.UITextField">
    <summary>A text entry control.</summary>
    <remarks>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="UIKit.UITextFieldDelegate" /> class and assign it to the <see cref="UIKit.Delegate" /> property.   Alternatively, for low-level control, by creating a class derived from <see cref="Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="UIKit.UITextField.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/index.html">Apple documentation for <c>UITextField</c></related>
  </Docs>
  <Docs DocId="P:UIKit.UITextField.TextDidBeginEditingNotification">
    <summary>Notification constant for TextDidBeginEditing</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UITextField.Notifications" />.<see cref="UIKit.UITextField.Notifications.ObserveTextDidBeginEditing" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidBeginEditing ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidBeginEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextDidBeginEditingNotification, (notification) => {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextDidBeginEditingNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:UIKit.UITextField.TextDidEndEditingNotification">
    <summary>Notification constant for TextDidEndEditing</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UITextField.Notifications" />.<see cref="UIKit.UITextField.Notifications.ObserveTextDidEndEditing" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidEndEditing ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidEndEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextDidEndEditingNotification, (notification) => {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextDidEndEditingNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:UIKit.UITextField.TextFieldTextDidChangeNotification">
    <summary>Notification constant for TextFieldTextDidChange</summary>
    <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
    <remarks>
      <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
      <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="UIKit.UITextField.Notifications" />.<see cref="UIKit.UITextField.Notifications.ObserveTextFieldTextDidChange" /> method which offers strongly typed access to the parameters of the notification.</para>
      <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextFieldTextDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextFieldTextDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
      </example>
      <para>The following example shows how to use the notification with the DefaultCenter API:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextFieldTextDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextFieldTextDidChangeNotification, Callback);
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Docs DocId="P:UIKit.UITextField.CurrentInputModeDidChangeNotification">
        <summary>Notification constant for CurrentInputModeDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (UITextField.CurrentInputModeDidChangeNotification, (notification) => Console.WriteLine ("Received the notification UITextField", notification);


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}
void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.CurrentInputModeDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
        <!-- BUGBUG/TODO, look at this orphan: DataDetectorTypes -->
      </Docs>
</Documentation>