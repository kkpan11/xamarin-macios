<Documentation>
  <Docs DocId="T:UIKit.UIButton">
    <summary>Button control.</summary>
    <remarks>A <see cref="UIKit.UIControl" /> that receives touch events. <see cref="UIKit.UIButton" />s are generally visible and often have a text <see cref="UIKit.UIButton.Title(UIKit.UIControlState)" />. </remarks>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Create_Different_Types_of_Buttons">Create Different Types of Buttons</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Handle_Clicks">Handle Clicks</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Set_Button_Text">Set Button Text</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Use_an_Image_for_a_Button">Use an Image for a Button</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/index.html">Apple documentation for <c>UIButton</c></related>
  </Docs>
  <Docs DocId="M:UIKit.UIButton.#ctor(UIKit.UIButtonType)">
        <param name="type">Button type to create.</param>
        <summary>Preferred constructor for UIButtons, but can not be used when subclassing.</summary>
        <remarks>
          <para>
	    This constructor should only be used in user code when you plan on using the C# syntax to initialize properties after the object has been created, like this:
	  </para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
var b = new UIButton (UIButtonType.Custom) {
    AdjustsImageWhenHighlighted = true,
    ContentEdgeInsets = myInsets;
};
	    ]]></code>
          </example>
          <para>
	    This constructor can not be used when subclassing as it is
	    not a real constructor, but instead a convenience
	    constructor that calls the static <see cref="UIKit.UIButton.FromType(UIKit.UIButtonType)" /> method and
	    then wraps the result into this object.  So you should
	    avoid subclassing UIButton and then calling into this
	    constructor from your subclass constructor.

	  </para>
        </remarks>
      </Docs>
</Documentation>