<Documentation>
  <Docs DocId="T:UIKit.NSLayoutManager">
    <summary>Responsible for layout of text stored in a <see cref="UIKit.NSTextStorage" /> object.</summary>
    <remarks>
      <para>iOS 7 introduced "Text Kit," a broad set of APIs and modifications of existing classes, built on <see cref="CoreText" />, that greatly expands the typographical flexibility of iOS.</para>
      <para>The <see cref="UIKit.NSLayoutManager" />'s <see cref="UIKit.NSLayoutManager.TextStorage" /> property holds a reference to a <see cref="UIKit.NSTextStorage" /> object, that holds a potentially large amount of styled text. The <see cref="UIKit.NSLayoutManager" />'s <see cref="UIKit.NSLayoutManager.NSTextContainers" /> property holds an ordered array of <see cref="UIKit.NSTextContainer" /> objects in which it lays out text. The <see cref="UIKit.NSTextContainer" />s, in turn, hold references to <see cref="UIKit.UITextView" /> objects, which actually display the text.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSLayoutManager_Class_TextKit/index.html">Apple documentation for <c>NSLayoutManager</c></related>
  </Docs>
  <Docs DocId="P:UIKit.NSLayoutManager.AllowsNonContiguousLayout">
    <summary>Whether layout can be done for a portion of the document without laying-out being recalculated from the beginning.</summary>
    <value>The default value is <see langword="false" />.</value>
    <remarks>
      <para>Setting this value to <see langword="true" /> allows the <see cref="UIKit.NSLayoutManager" /> to perform noncontiguous layout. In large documents, this can significantly increase performance, since the layout does not need to performed from the beginning of the document.</para>
      <para>Application developers can use the <c>EnsureLayout...</c> methods with noncontiguous methods to confirm that particular portions of the text are being laid out properly.</para>
      <para>The <see cref="UIKit.UITextView.LayoutManager" /> is instantiated with its <see cref="UIKit.NSLayoutManager.AllowsNonContiguousLayout" /> property set to <see langword="true" />.</para>
    </remarks>
    <altmember cref="UIKit.NSLayoutManager.HasNonContiguousLayout" />
    <altmember cref="UIKit.NSLayoutManager.EnsureGlyphsForCharacterRange" />
    <altmember cref="UIKit.NSLayoutManager.EnsureGlyphsForGlyphRange" />
    <altmember cref="UIKit.NSLayoutManager.EnsureLayoutForCharacterRange" />
    <altmember cref="UIKit.NSLayoutManager.EnsureLayoutForGlyphRange" />
    <altmember cref="UIKit.NSLayoutManager.EnsureLayoutForTextContainer" />
    <altmember cref="UIKit.NSLayoutManager.EnsureLayoutForBoundingRect" />
  </Docs>
  <Docs DocId="M:UIKit.NSLayoutManager.DrawStrikethrough(Foundation.NSRange,Foundation.NSUnderlineStyle,System.Runtime.InteropServices.NFloat,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)">
        <param name="glyphRange">The range of glyphs to be struck through.</param>
        <param name="strikethroughVal">The drawing style of the strikethrough (for instance, dashed or solid).</param>
        <param name="baselineOffset">Distance above the baseline to draw the strikethrough.</param>
        <param name="lineRect">The line fragment rectangle containing <paramref name="glyphRange" />.</param>
        <param name="lineGlyphRange">All glyphs within <paramref name="lineRect" />.</param>
        <param name="containerOrigin">The origin of the <paramref name="lineRect" /> objects containing <see cref="UIKit.NSTextContainer" />.</param>
        <summary>Draws a strikethrough line through the glyphs in <paramref name="glyphRange" />.</summary>
        <remarks>
          <para>Developers should generally use the simpler <see cref="UIKit.NSLayoutManager.Strikethrough(Foundation.NSRange,Foundation.NSUnderlineStyle,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" /> method.</para>
        </remarks>
      </Docs>
</Documentation>