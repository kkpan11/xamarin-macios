<Documentation>
  <Docs DocId="M:AssetsLibrary.ALAsset.#ctor(Foundation.NSObjectFlag)">
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (CGRect frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="M:AssetsLibrary.ALAsset.AspectRatioThumbnail">
        <summary>Returns a thumbnail image that preserves the original aspect ration of the source image.</summary>
        <returns>CGImage that has already been rotated to the right orientation.</returns>
        <remarks>
          <para>
	    This returns a thumbnail image representing the asset.
	    The thumbnail returned will preserve the original aspect
	    ration of the original image returned by the <see cref="AssetsLibrary.ALAssetRepresentation" />.<see cref="AssetsLibrary.ALAssetRepresentation.GetImage()" />.
	    The image will be rendered in the correct orientation, so
	    it is not necessary to apply any rotation on the returned value.

	  </para>
          <para>
	    This API is only available on iOS 5.  On previous version
	    of the operating system you can obtain a square thumbnail by using the <see cref="AssetsLibrary.ALAsset.Thumbnail" />
	    property.
	  </para>
        </remarks>
      </Docs>
  <Docs DocId="M:AssetsLibrary.ALAsset.SetVideoAtPathAsync(Foundation.NSUrl)">
        <param name="videoPathURL">To be added.</param>
        <summary>Modifies the <see cref="AssetsLibrary.ALAsset" /> to refer to the <paramref name="videoPathURL" />.</summary>
        <returns>
          <para>A task that represents the asynchronous SetVideoAtPath operation. The value of the TResult parameter is a <see cref="NSUrl" />.</para>
        </returns>
        <remarks>
          <para>Application developers should check the <see cref="AssetsLibrary.ALAsset.Editable" /> property prior to calling this method.</para>
          <para copied="true">The SetVideoAtPathAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
</Documentation>