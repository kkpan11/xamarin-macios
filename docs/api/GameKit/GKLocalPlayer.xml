<Documentation>
  <Docs DocId="T:GameKit.GKLocalPlayer">
    <summary>Represents the authenticated local player.</summary>
    <remarks>
      <para>
	Represents the authenticated player for this device.   
      </para>
      <para>
	On iOS 6.0 and newer, to authenticate the user, set the <see cref="GameKit.GKLocalPlayer.AuthenticateHandler" />
	property to a delegate that takes both a UIViewController and
	an NSError parameters.  This will trigger the authentication
	to take place.  For older versions of iOS, you should call the
	<see cref="GameKit.GKLocalPlayer.Authenticate(System.Action{Foundation.NSError})" />
	method.  The difference is that with iOS 6.0 your callback
	receives a UIViewController that you can present to your user,
	while the old API would present the API and invoke your
	callback on an arbitrary thread.

      </para>
      <para>
	GameKit will call <see cref="GameKit.GKLocalPlayer.AuthenticateHandler" />
	on demand as your application transitions from background and
	foreground.  It is important that you update any internal
	state when authenticated as the user might have logged off,
	and logged in with a different account.

      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
//
// This shows how to authenticate on both iOS 6.0 and older versions
//
if (UIDevice.CurrentDevice.CheckSystemVersion (6, 0)) {
    //
    // iOS 6.0 and newer
    //
    GKLocalPlayer.LocalPlayer.AuthenticateHandler = (ui, error) => {

        // If ui is null, that means the user is already authenticated,
	// for example, if the user used Game Center directly to log in

	if (ui != null)
            current.PresentModalViewController (ui, true);
	else {
	    // Check if you are authenticated:
	    var authenticated = GKLocalPlayer.LocalPlayer.Authenticated;
	}
	Console.WriteLine ("Authentication result: {0}",err);
    };
} else {
    // Versions prior to iOS 6.0
    GKLocalPlayer.LocalPlayer.Authenticate ((err) => {
        Console.WriteLine ("Authentication result: {0}",err);
    });
};
]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKLocalPlayer_Ref/index.html">Apple documentation for <c>GKLocalPlayer</c></related>
  </Docs>
  <Docs DocId="P:GameKit.GKLocalPlayer.AuthenticationDidChangeNotificationName">
        <summary>Notification constant for AuthenticationDidChangeNoti</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="GameKit.GKLocalPlayer.Notifications.ObserveAuthenticationDidChangeNotificationName" /> methods which offer strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
//
// Lambda style
//

// listening
notification = GKLocalPlayer.Notifications.ObserveAuthenticationDidChangeNotificationName ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = GKLocalPlayer.Notifications.ObserveAuthenticationDidChangeNotificationName (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        GKLocalPlayer.AuthenticationDidChangeNotificationName, (notification) => {Console.WriteLine ("Received the notification GKLocalPlayer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification GKLocalPlayer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (GKLocalPlayer.AuthenticationDidChangeNotificationName, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>