<Documentation>
  <Docs DocId="M:AudioToolbox.SystemSound.Dispose(System.Boolean)">
    <param name="disposing">
      <para>If set to <see langword="true" />, the method is invoked directly and will dispose managed and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
    </param>
    <summary>Releases the resources used by the SystemSound object.</summary>
    <remarks>
      <para>This Dispose method releases the resources used by the SystemSound class.</para>
      <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
      <para>Calling the Dispose method when the application is finished using the SystemSound ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
      <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
    </remarks>
  </Docs>
  <Docs DocId="T:AudioToolbox.SystemSound">
    <summary>Provides methods for producing simple sounds.</summary>
    <remarks>
      <para>
	This API is intended to be used to play sound effects or to
	make the device vibrate.  You use <see cref="AudioToolbox.SystemSound.PlaySystemSoundAsync" />
	to play short sounds and <see cref="AudioToolbox.SystemSound.PlayAlertSoundAsync" />
	to play either the sound or vibrate (depending on the device
	settings).
      </para>
      <para>
	Unlike the <see cref="AVFoundation.AVAudioPlayer" /> which works
	with the audio session and is able to dim your audio, play in
	the background and interact with the system based on a set of
	rules, the SystemSound does not support this.  So you should
	in general avoid using it for anything but sound effects and
	device vibration.
      </para>
      <para>
	As of iOS 8, SystemSound has the following restrictions:
      </para>
      <list type="bullet">
        <item>
          <term>
	    Audio Format: PCM or IMA4 (IMA/ADPCM).
	  </term>
        </item>
        <item>
          <term>
	    Audio Container: .caf, .aif or .wav containers.
	  </term>
        </item>
        <item>
          <term>
	    At most 30 seconds of duration.
	  </term>
        </item>
        <item>
          <term>
	    There is no volume control, this uses the system volume.
	  </term>
        </item>
        <item>
          <term>
	    Sound plays immediately.
	  </term>
        </item>
        <item>
          <term>
	    Only one sound can be played at a time, there is no way to play more than one sound at a time.
	  </term>
        </item>
      </list>
      <para>
	To play a sound, you first create an instance of the
	SystemSound object, either via the constructor, or one of the
	<see cref="AudioToolbox.SystemSound.FromFile(System.String)" />
	methods.  Once this object has been created, you call one of
	the playback methods <see cref="AudioToolbox.SystemSound.PlaySystemSoundAsync" />
	to play short sounds and <see cref="AudioToolbox.SystemSound.PlayAlertSoundAsync" />.
      </para>
    </remarks>
  </Docs>
</Documentation>