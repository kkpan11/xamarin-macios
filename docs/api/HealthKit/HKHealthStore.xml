<Documentation>
  <Docs DocId="T:HealthKit.HKHealthStore">
    <summary>MonoTouch.HealthKit.HKHealthStore A connection to the system-wide database of health-related information.</summary>
    <remarks>
      <para>Individual <see cref="HealthKit.HKHealthStore" /> instances represent connections to the underlying data store. Instantiating a <see cref="HealthKit.HKHealthStore" /> does not necessarily imply that the user has granted any amount of access for reading or querying data. App devs must call <see cref="HealthKit.HKHealthStore.RequestAuthorizationToShare(Foundation.NSSet,Foundation.NSSet,System.Action{System.Boolean,Foundation.NSError})" /> or <see cref="HealthKit.HKHealthStore.RequestAuthorizationToShareAsync(Foundation.NSSet,Foundation.NSSet)" /> prior to access.</para>
      <para>The result of <see cref="HealthKit.HKHealthStore.RequestAuthorizationToShareAsync(Foundation.NSSet,Foundation.NSSet)" /> or <see cref="HealthKit.HKHealthStore.RequestAuthorizationToShare(Foundation.NSSet,Foundation.NSSet,System.Action{System.Boolean,Foundation.NSError})" /> does not indicate that the user allowed access to the requested data; it indicates only that the user interacted with the permissions dialog (or that an error occurred while presenting that dialog). To validate access to a particular data type, developers must use the <see cref="HealthKit.HKHealthStore.GetAuthorizationStatus(HealthKit.HKObjectType)" /> method:</para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
var temperatureKey = HKQuantityTypeIdentifierKey.BodyTemperature;
var tempQuantityType = HKObjectType.GetQuantityType (temperatureKey);

var hks = new HKHealthStore ();
var success = await hks.RequestAuthorizationToShareAsync (new NSSet (new [] { tempQuantityType }), new NSSet ());
if (success)
{
   var access = hks.GetAuthorizationStatus (tempQuantityType);
   if (access.HasFlag (HKAuthorizationStatus.SharingAuthorized)) {
	 //...etc...
          ]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKHealthStore_Class/index.html">Apple documentation for <c>HKHealthStore</c></related>
  </Docs>
  <Docs DocId="P:HealthKit.HKHealthStore.UserPreferencesDidChangeNotification">
        <summary>Notification constant for UserPreferencesDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        HKHealthStore.UserPreferencesDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification HKHealthStore", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification HKHealthStore", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (HKHealthStore.UserPreferencesDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>