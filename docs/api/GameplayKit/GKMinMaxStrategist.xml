<Documentation>
  <Docs DocId="T:GameplayKit.GKMinMaxStrategist">
    <summary>Game AI that evaluates potential game states, scores them, and attempts to maximize it's own score while minimizing it's opponents.</summary>
    <remarks>
      <para>The <see cref="GameplayKit.GKMinMaxStrategist" /> class is an implementation of the minimax algorithm, optimized for space efficiency. Developers do not subclass <see cref="GameplayKit.GKMinMaxStrategist" />, but instead create game-specific implementations of <see cref="GameplayKit.IGKGameModelPlayer" />, <see cref="GameplayKit.IGKGameModel" />, and <see cref="GameplayKit.IGKGameModelUpdate" />. This is discussed in detail in the "AI Opponent" section of the remarks section of the <see cref="GameplayKit" /> namespace documentation.</para>
      <para>Perhaps because <see cref="GameplayKit.GKMinMaxStrategist" /> is a highly-optimized implementation, it's failure modes are difficult to debug. Typically, a mistake in the configuration of <see cref="GameplayKit.GKMinMaxStrategist" /> or in the implementation of the related game classes results in an <see langword="null" /> returned by <see cref="GameplayKit.GKMinMaxStrategist.GetBestMove(GameplayKit.IGKGameModelPlayer)" /> with no error message in the console or system log. The following sequence diagram may be of some help in placing breakpoints:</para>
      <para>
        <img href="~/GameplayKit/_images/GKMinMaxStrategist.GetBestMoveMove_Sequence.png" alt="Sequence diagram showing the get best move algorithm." />
      </para>
      <para>Because <see cref="GameplayKit.GKMinMaxStrategist.GetBestMove(GameplayKit.IGKGameModelPlayer)" /> is very expensive, developers should typically call it from a background <see cref="System.Threading.Tasks.Task" />.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKMinmaxStrategist_Class/index.html">Apple documentation for <c>GKMinmaxStrategist</c></related>
  </Docs>
</Documentation>