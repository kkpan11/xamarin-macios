<Documentation>
  <Docs DocId="T:CloudKit.CKContainer">
    <summary>Encapsulates content associated with an app, including shared and per-user private data.</summary>
    <remarks>
      <para>The <see cref="CloudKit.CKContainer" /> class is the highest-level class in the <see cref="CloudKit" /> namespace. A CloudKit Container (sometimes referred to in Apple documentation as a "Ubiquity container") is an information store identified with a particular name. Apple advises using a name of the form "iCloud.{reverse DNS}.{appName}", for instance, "iCloud.com.mycompany.MyApp". Developers must create and configure their containers using the iCloud Dashboard, available by way of the Apple developer portal. To retrieve a container, developers use the static <see cref="CloudKit.CKContainer.FromIdentifier(System.String)" /> method.</para>
      <para>A single <see cref="CloudKit.CKContainer" /> may contain both public data, which is shared between all instances of the app (see <see cref="CloudKit.CKContainer.PublicCloudDatabase" />), and private data, which contains user-specific data (see <see cref="CloudKit.CKContainer.PrivateCloudDatabase" />). Within iCloud, public data is stored in the app's iCloud storage while private data is stored in the user's private iCloud storage. The public <see cref="CloudKit.CKDatabase" /> is available to all connected users of the app, whether or not they are logged in to iCloud. The private <see cref="CloudKit.CKDatabase" /> is only if the user is logged in to iCloud. Developers must write their code such that it reacts gracefully to changes in the user's login or connection status.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/CloudKit/Reference/CKContainer_class/index.html">Apple documentation for <c>CKContainer</c></related>
  </Docs>
  <Docs DocId="P:CloudKit.CKContainer.AccountChangedNotification">
        <summary>Notification constant for AccountChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        CKContainer.AccountChangedNotification, (notification) => {Console.WriteLine ("Received the notification CKContainer", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification CKContainer", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (CKContainer.AccountChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>