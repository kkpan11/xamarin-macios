<Documentation>
  <Docs DocId="M:ObjCRuntime.Dlfcn.dlsym(System.IntPtr,System.String)">
    <param name="handle">Handle to the dynamic library previously opened with <see cref="ObjCRuntime.Dlfcn.dlopen(System.String,System.Int32)" />.</param>
    <param name="symbol">Name of the public symbol in the dynamic library to look up.</param>
    <summary>Returns the address of the specified symbol in the dynamic library.</summary>
    <returns>
	  Returns <see langword="null" /> if the symbol was not found.   The error condition can be probed using the <see cref="ObjCRuntime.Dlfcn.dlerror" />.
        </returns>
    <remarks>
      <para>
	    Returns the address of the specified symbol in the dynamic library.
	  </para>
      <para>
	    Which libraries and bundles are searched depends on the handle parameter.
	  </para>
      <para>
	    The symbol name passed to dlsym() is the name used in C
	    source code.  For example to find the address of function
	    foo(), you would pass "foo" as the symbol name.  This is
	    unlike the older dyld APIs which required a leading
	    underscore.  If you looking up a C++ symbol, you need to
	    use the mangled C++ symbol name.
	  </para>
    </remarks>
  </Docs>
  <Docs DocId="T:ObjCRuntime.Dlfcn">
    <summary>Provides access to the dynamic linker</summary>
    <remarks>
      <para>
	The methods in this class are used to access the iOS/macOS
	dynamic linker.  You can use the methods in this class to get
	a handle to native shared libraries and looking up public
	symbols from them as well as looking up constants defined in a
	dynamic library.
      </para>
      <para> You can use <see cref="ObjCRuntime.Dlfcn.dlopen(System.String,System.Int32)" /> to bring a library into memory and
	<see cref="ObjCRuntime.Dlfcn.dlclose(System.IntPtr)" /> to close the library and <see cref="ObjCRuntime.Dlfcn.dlerror" /> to diagnose problems
	with calls to dlopen.
      </para>
      <para>
	There are various methods exposed to read and write the values
	of symbols exposed by the dynamic linker.   Typically these
	are used to access global variables from a library.
      </para>
      <para>
	The GetCGSize, GetDouble, GetFloat, GetIndirect, GetInt32,
	GetInt64, GetIntPtr, GetNSNumber, GetStringConstant methods can
	be used to retrieve the value of a global symbol.
      </para>
      <para>
	The SetArray, SetCGSize, SetDouble, SetFloat, SetInt32,
	SetInt64, SetIntPtr, SetString can be used to set global
	symbols to a specified value.
      </para>
    </remarks>
  </Docs>
</Documentation>