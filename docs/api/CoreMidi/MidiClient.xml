<Documentation>
  <Docs DocId="M:CoreMidi.MidiClient.Dispose(System.Boolean)">
    <param name="disposing">
      <para>If set to <see langword="true" />, the method is invoked directly and will dispose managed and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
    </param>
    <summary>Releases the resources used by the MidiClient object.</summary>
    <remarks>
      <para>This Dispose method releases the resources used by the MidiClient class.</para>
      <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
      <para>Calling the Dispose method when the application is finished using the MidiClient ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
      <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
    </remarks>
  </Docs>
  <Docs DocId="T:CoreMidi.MidiClient">
    <summary>Main entry point to use MIDI in MacOS X and iOS.</summary>
    <remarks>
      <para>
	The MidiClient class is your gateway to communicate with the
	MIDI subsystem on MacOS and iOS.  
      </para>
      <para>
	You typically will create an instance of MidiClient with a
	name that identifies this particular client, connect to the
	various events that are exposed to this class and create both
	input and output midi ports using the <see cref="CoreMidi.MidiClient.CreateInputPort(System.String)" /><see cref="CoreMidi.MidiClient.CreateOutputPort(System.String)" />
	methods.

      </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
client = new MidiClient ("CoreMidiSample MIDI CLient");
client.ObjectAdded += delegate(object sender, ObjectAddedOrRemovedEventArgs e) {
	Console.WriteLine ("Object {0} added to {1}", e.Child, e.Parent);
};
client.ObjectRemoved += delegate(object sender, ObjectAddedOrRemovedEventArgs e) {
	Console.WriteLine ("Object {0} removed to {1}", e.Child, e.Parent);
};
client.PropertyChanged += delegate(object sender, ObjectPropertyChangedEventArgs e) {
	Console.WriteLine ("Property {0} changed on {1}", e.PropertyName, e.MidiObject);
};
client.ThruConnectionsChanged += delegate {
	Console.WriteLine ("Thru connections changed");
};
client.SerialPortOwnerChanged += delegate {
	Console.WriteLine ("Serial port changed");
};

//
// Create your input and output ports
//
outputPort = client.CreateOutputPort ("CoreMidiSample Output Port");
inputPort = client.CreateInputPort ("CoreMidiSample Input Port");

// Print out packets when we receive them
inputPort.MessageReceived += delegate(object sender, MidiPacketsEventArgs e) {
    Console.WriteLine ("Got {0} packets", e.Packets.Length);
};
	]]></code>
      </example>
      <para>
	The following events will be raised on your MidiClient instance: 
	<see cref="CoreMidi.MidiClient.IOError" />, 
	<see cref="CoreMidi.MidiClient.ObjectAdded" />,
	<see cref="CoreMidi.MidiClient.ObjectRemoved" />, 
	<see cref="CoreMidi.MidiClient.PropertyChanged" />, 
	<see cref="CoreMidi.MidiClient.SerialPortOwnerChanged" />,
	<see cref="CoreMidi.MidiClient.SetupChanged" /> and 
	<see cref="CoreMidi.MidiClient.ThruConnectionsChanged" /></para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/CoreMidiSample/">CoreMidiSample</related>
  </Docs>
</Documentation>